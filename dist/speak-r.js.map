{"version":3,"file":null,"sources":["../app/lang/syntax.js","../app/model/token.js","../app/model/ramda-piped.js","../app/pipefy.js","../app/util.js","../app/core/fabric.js","../app/core/splitter.js","../app/core/string-preprocess.js","../app/model/lexeme.js","../app/model/head-list.js","../app/lang/tooling.js","../app/print.js","../app/core/tree.js","../app/core/convolve.js","../app/model/outfall.js","../app/core/context.js","../app/core/say.js","../app/index.js"],"sourcesContent":["const op = {\r\n  doubledots:'::',\r\n  comma:',',\r\n  dash:'_',\r\n  arrow:'->',\r\n  doublearrow:'=>',\r\n  middlepipe:'<|>',\r\n  backpipe:'<|',\r\n  forwardpipe: '|>',\r\n  equals:'==',\r\n  plus:'+',\r\n  minus:'-',\r\n  map:'[^]',\r\n  define:':='\r\n}\r\nconst types = {\r\n  type:'type',\r\n  R:'R',\r\n  string:'string',\r\n  number:'number',\r\n  op:'operator',\r\n  any:'any',\r\n  context:'context',\r\n  lex:'lexeme',\r\n  F:'contextF',\r\n  arg:'argument'\r\n}\r\nconst jstypes = [\r\n  ['Array', Array],\r\n  ['Number', Number],\r\n  ['String', String],\r\n  ['Function', Function],\r\n  ['Object', Object],\r\n  ['Null', null],\r\n  ['RegExp', RegExp]]\r\nconst quotes = ['\"',\"'\",'`']\r\nconst categories = {\r\n  piped:[types.R,types.context,types.lex],\r\n  inserted:[types.number,types.string,types.type,types.any],\r\n  control:[types.op]\r\n}\r\nconst lexemeTypes = {\r\n  pipe:'Pipe',\r\n  context:'Context',\r\n  atomic:'AtomicFunc',\r\n  expr:'Expression',\r\n  arg:'Argument'\r\n}\r\nmodule.exports = {op,types,quotes,categories,jstypes,lexemeTypes}","const R = require('ramda')\r\nconst types = require('../lang/syntax').types\r\n\r\nconst TokenFabric = R.curry((category,obj)=>{\r\n  return {\r\n    type:category,\r\n    value:obj\r\n  }\r\n})\r\n\r\nmodule.exports = R.map(e=>TokenFabric(types[e]),{\r\n  Type      :'type',\r\n  R         :'R',\r\n  String    :'string',\r\n  Number    :'number',\r\n  Operator  :'op',\r\n  Any       :'any',\r\n  Context   :'context',\r\n  Arg       :'arg'\r\n})","const R = require('ramda')\r\n\r\nconst def = (func,obj)=>prop=>\r\n  Object.defineProperty(obj,prop[0],{\r\n    get:function(){\r\n      func(prop[1])\r\n      return obj}})\r\nconst appender = _store=>val=>_store.push(val)\r\nconst setter = (store,ins,dict)=> R.pipe(R.toPairs,R.forEach(def(appender(store),ins)))(dict)\r\nfunction polymorph(store) {\r\n  // Doesnt understand wtf is going on here, but seem like this check never fall\r\n\r\n  // const inputCheck = (argsArr,_store)=>\r\n  //   !R.isEmpty(argsArr)\r\n  //   &&!R.is(Function,argsArr[0])&&\r\n  //   R.none(R.isNil,argsArr)\r\n  //   &&!R.isEmpty(_store)\r\n  return function ins(...val) {\r\n    // if (inputCheck(val,store)) {\r\n    store.push(store.pop()(...val))\r\n    // }\r\n    return ins\r\n  }\r\n}\r\nfunction storage(dict) {\r\n  var store = []\r\n  var ins = polymorph(store)\r\n  Object.defineProperty(ins,'store',{get:function(){return store}})\r\n  Object.defineProperty(ins,'run',{get: function() {return R.pipe(...store)}})\r\n  setter(store,ins,dict)\r\n  return ins\r\n}\r\nconst RP = {}\r\nObject.defineProperty(RP,'do',{get:function(){return storage(R)}})\r\n\r\n\r\n\r\nmodule.exports = ()=>RP.do","const R = require('ramda')\r\n\r\nclass Red {\r\n  static add(acc,val) {\r\n    return R.append(val,acc)\r\n  }\r\n  static forget(acc) {\r\n    return acc\r\n  }\r\n  // static morph(morpher) {\r\n  //   return function(acc,val) {\r\n  //     return morpher(val,acc)\r\n  //   }\r\n  // }\r\n  // static check(tests) {\r\n  //   let passing = R.allPass(tests)\r\n  //   return function(acc,val) {\r\n  //     return passing(val)\r\n  //       ? Red.add(acc,val)\r\n  //       : Red.forget(acc,val)\r\n  //   }\r\n  // }\r\n  constructor(reducer,acc=Red.add) {\r\n    return R.transduce(reducer,acc,[])\r\n  }\r\n  static ucer(...reducers) {\r\n    return new Red(R.compose(...reducers))\r\n  }\r\n}\r\n\r\nconst _filter = R.compose(\r\n    R.flatten,\r\n    R.map(R.when(R.is(Array),R.map(_P))),\r\n    R.filter(R.is(Function))\r\n)\r\nconst tr = new Red()\r\nconst accum = R.ifElse(R.is(Array),R.flip(R.concat),Red.add)\r\nfunction _P(...pipes) {\r\n  let filtered = _filter(pipes)\r\n  return R.pipe(...filtered)\r\n}\r\n\r\nconst filtP = R.either(R.is(Array),R.is(Function))\r\n\r\nconst P = new Red(R.filter(filtP),R.check)\r\n\r\nfunction _P2(pipe1,pipe2,data) {\r\n  return pipe2(pipe1(data))\r\n}\r\nconst P2 = R.curry(_P2)\r\n\r\nObject.defineProperty(_P,'P2',{value:P2})\r\nObject.defineProperty(_P,'Red',{value:Red})\r\nObject.defineProperty(_P,'toPipe',{value:funcs=>R.pipe(...funcs)})\r\n\r\nmodule.exports = _P","const R = require('ramda')\r\nconst debug = require('debug')\r\n\r\nconst RP = require('./model/ramda-piped')\r\n\r\nconst pipefy = require('./pipefy')\r\nconst P = pipefy\r\n\r\nconst isof = {\r\n  String: R.is(String),\r\n  Func:   R.is(Function),\r\n  Array:  R.is(Array),\r\n  Nil:    R.isNil,\r\n  Real:   e=>!R.isNil(e),\r\n  Empty:  R.isEmpty,\r\n  Full:   e=>!R.isEmpty(e)\r\n}\r\n\r\nconst tagvalue = (tag,mess)=>isof.Nil(mess) ? tag : [tag,mess].join(':  ')\r\nconst log = tag=>mess=>debug(tagvalue(tag,mess))\r\nconst pipelog = tag=>mess=>R.tap(log(tag)(mess))\r\n\r\nconst arrayify = R.pipe(R.defaultTo([]),R.unless(isof.Array,R.of))\r\n\r\n// const P = (...pipes)=>R.apply(R.pipe,R.filter(isof.Func,pipes))\r\n\r\n\r\nconst isContainOrEq = P(arrayify,R.flip(R.contains))\r\n\r\n\r\nconst {create, env} = require('sanctuary')\r\nconst checkTypes = false//process.env.NODE_ENV !== 'production';\r\nconst S = create({checkTypes: checkTypes, env: env})\r\n\r\nconst prop = R.map(R.prop,{\r\n  type: 'type',\r\n  val:  'value',\r\n  head: 'head',\r\n  tail: 'tail',\r\n  data: 'data'\r\n})\r\n\r\nconst isString = isof.String\r\n\r\nmodule.exports = {\r\n  pipelog,log,isString,arrayify,P,isof,isContainOrEq,prop,RP,S\r\n}","const R = require('ramda')\r\nconst syntax = require('../lang/syntax')\r\n\r\n\r\nconst Token = require('../model/token')\r\nconst util = require('../util')\r\nconst S = util.S\r\nconst P = util.P\r\n\r\nconst isString = util.isString\r\n// const log = util.log('fabric')\r\n// const pipelog = util.pipelog('fabric')\r\n\r\nfunction TokenFabric(tokenType, condition, transformation) {\r\n  const onCondition = P(util.arrayify, R.allPass, S.either(R.__, R.F))\r\n  const appendArray = R.flip(R.concat)\r\n  const addSteps = appendArray([tokenType, S.Right])\r\n  const transformUntouched = P(\r\n    util.arrayify,\r\n    addSteps,\r\n    e=>util.P(...e),//TODO implement this feature in P\r\n    e=>S.either(e, R.identity))\r\n  return R.when(onCondition(condition), transformUntouched(transformation))\r\n}\r\n\r\nconst quoteProcessor = function () {\r\n  const isQuote = R.anyPass(R.map(R.equals, syntax.quotes))\r\n  const isQuoted = R.allPass([P(R.head, isQuote), P(R.last, isQuote)])\r\n  const removeQuotes = P(R.init, R.tail)\r\n  return TokenFabric(Token.String, [isString, isQuoted], [R.trim, removeQuotes])\r\n}\r\nconst typesProcessor = () => {\r\n  const types = new Map(syntax.jstypes)\r\n  const isInMap = obj => isString(obj) ? types.has(obj) : false\r\n  return TokenFabric(Token.Type, isInMap, e => types.get(e))\r\n}\r\n\r\nconst isNumber = TokenFabric(Token.Number, isFinite, parseFloat)\r\nconst vendorProcessor = () => {\r\n  const isFunc = R.is(Function)\r\n  const isRamda = obj => isFunc(R[obj])\r\n  return TokenFabric(Token.R, [isString, isRamda], R.prop(R.__, R))\r\n}\r\nconst contextValidation = str => P(R.match(/\\D\\w+/), R.head, R.equals(str))(str)\r\nconst isContext = TokenFabric(Token.Context, contextValidation)\r\nconst argValidation = R.both(P(R.head,R.equals('@')),P(R.tail,contextValidation))\r\nconst isArg = TokenFabric(Token.Arg, argValidation, R.tail)\r\n\r\nconst preprocess = S.lift(R.when(isString, R.trim))\r\nconst postprocess = R.identity\r\nmodule.exports = {\r\n  isQuote: quoteProcessor(),\r\n  isType: typesProcessor(),\r\n  isVendor: vendorProcessor(),\r\n  isNumber,\r\n  isContext,\r\n  isArg,\r\n  preprocess,\r\n  postprocess\r\n}","const R = require('ramda')\r\nconst util = require('../util')\r\nconst P = util.P\r\n\r\nconst Token = require('../model/token')\r\nconst log = util.pipelog('splitter')\r\nconst operators = R.values(require('../lang/syntax').op) //TODO rewrite op list using\r\n\r\nconst toPipe = P.toPipe\r\nconst stringMorpher = morph=>R.map(R.when(util.isof.String,morph))\r\nconst stringTrim = stringMorpher(R.trim)\r\nconst rejectEmpty = R.reject(R.isEmpty)\r\n\r\nconst opersFuncs = [\r\n  R.split,\r\n  P(Token.Operator,R.intersperse)\r\n]\r\n\r\nconst constFuncs = [\r\n  rejectEmpty,\r\n  R.unnest\r\n]\r\n\r\nconst splitCond = symb=>R.cond([\r\n  [util.isof.String,symb],\r\n  [R.T,log('uncaught')]\r\n])\r\nconst unnester = symbPipe=>P(\r\n  symbPipe,\r\n  R.unnest)\r\nconst splitsPipe = [\r\n  R.of,\r\n  R.ap(opersFuncs),\r\n  R.concat(R.__,constFuncs),\r\n  toPipe,\r\n  splitCond,\r\n  R.map,\r\n  unnester,\r\n  log('splitPipe')]\r\nconst splitter = P(toPipe,R.map(R.__,operators),toPipe)(splitsPipe)\r\nconst cleaner = P(R.unnest,stringTrim,rejectEmpty,log('end'))\r\nconst execFuncs = [\r\n  util.arrayify,\r\n  splitter,\r\n  cleaner]\r\nconst exec = toPipe(execFuncs)\r\nmodule.exports = {exec,cleaner}","const R = require('ramda')\r\n\r\nconst fab = require('./fabric')\r\n\r\nconst splitter = require('./splitter')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\n\r\nconst pipelog = util.pipelog('preproc')\r\nconst singleWordParsing =\r\n  R.pipe(\r\n    fab.preprocess,\r\n    pipelog('->isQuote'),\r\n    fab.isQuote,\r\n    pipelog('->isNumber'),\r\n    fab.isNumber,\r\n    pipelog('->isType'),\r\n    fab.isType,\r\n    pipelog('->isVendor'),\r\n    fab.isVendor,\r\n    pipelog('->isArg'),\r\n    fab.isArg,\r\n    pipelog('->isContext'),\r\n    fab.isContext,\r\n    pipelog('->postprocess'),\r\n    fab.postprocess)\r\nfunction splitKeywords(data) {\r\n  const err = R.unless(util.isString, () => { throw new Error('`keywords` should be String'); })\r\n  const beforeSplit = R.pipe(\r\n    err,\r\n    R.split(' '),\r\n    R.reject(R.isEmpty))\r\n  const sSort = R.map(R.ifElse(R.is(Object),S.Right,S.Left))\r\n  const _drops = (a,b)=>R.allPass([\r\n    R.propEq('type','operator'),\r\n    R.propEq('obj',','),\r\n    R.eqProps('obj',R.__,b)\r\n  ])(a)\r\n  const drops = R.dropRepeatsWith(_drops)\r\n  let un = R.unary(R.pipe(\r\n    beforeSplit,\r\n    splitter.exec,\r\n    sSort,\r\n    pipelog('тэг'),\r\n\r\n    R.map(singleWordParsing),\r\n    drops\r\n  ))\r\n  fab\r\n  return un(data)\r\n}\r\n\r\n\r\nmodule.exports = splitKeywords","const R = require('ramda')\r\n\r\nconst lexemeTypes = require('../lang/syntax').lexemeTypes\r\n\r\nclass ILexeme {\r\n  constructor(typename,obj) {\r\n    obj.index = obj.head.index\r\n    obj.lexeme = typename\r\n    return obj\r\n  }\r\n}\r\nclass Lexeme {\r\n  static Pipe(tokensHList) {\r\n    return new ILexeme(lexemeTypes.pipe,tokensHList)\r\n  }\r\n  static AtomicFunc(tokensHList) {\r\n    return new ILexeme(lexemeTypes.atomic,tokensHList)\r\n  }\r\n  static Expression(tokensHList) {\r\n    return new ILexeme(lexemeTypes.expr,tokensHList)\r\n  }\r\n  static Argument(tokensHList) {\r\n    return new ILexeme(lexemeTypes.arg,tokensHList)\r\n  }\r\n  static get its() {\r\n    const eq = R.propEq('lexeme')\r\n    return R.map(eq,lexemeTypes)\r\n  }\r\n  static Context(token) {\r\n    return new Lexeme(lexemeTypes.context,token)\r\n  }\r\n}\r\n\r\nmodule.exports = Lexeme","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\n\r\nconst P = util.P\r\n\r\nclass HeadList {\r\n  constructor(rawList, head) {\r\n    if (!R.is(Array,rawList)||R.isEmpty(rawList)) return S.Left('No array recieved')\r\n    if (R.isNil(head)) {\r\n      this.head = R.head(rawList)\r\n      this.tail = R.tail(rawList)\r\n    } else {\r\n      this.head = head\r\n      this.tail = rawList||[]\r\n    }\r\n    this[Symbol.iterator] = function* () {\r\n      yield this.head\r\n      for (let e of this.tail)\r\n        yield e\r\n    }\r\n  }\r\n  get toArray() {\r\n    return R.prepend(this.head,this.tail)\r\n  }\r\n  get length() {\r\n    return R.defaultTo(0,this.tail.length)+R.isEmpty(this.head)?0:1\r\n  }\r\n  append(e) {\r\n    if (R.isEmpty(this.tail)&&R.isEmpty(this.head))\r\n      this.head = e\r\n    else\r\n      this.tail.push(e)\r\n    return this\r\n  }\r\n  static get prepend() {\r\n    return R.curry((val,list)=>{\r\n      list.tail = R.prepend(list.head, list.tail)\r\n      list.head = val\r\n      return list\r\n    })\r\n  }\r\n  static cyclic(func) {\r\n    return function(list) {\r\n      for(let e of list)\r\n        e = P(R.when(\r\n          HeadList.isList,\r\n          HeadList.cyclic(func)),func)(e)\r\n      return list\r\n    }\r\n  }\r\n\r\n  static hasTail(list) {return R.has('tail',list)&&!R.isEmpty(list.tail)}\r\n  static last(list) {\r\n    return HeadList.hasTail(list)\r\n      ? R.last(list.tail)\r\n      : list.head\r\n  }\r\n  static lastR(list,isStrict=false) {\r\n    const _hasTail = R.has('tail')\r\n    const notHas = P(_hasTail,R.not)\r\n    const cond = R.either(notHas,P(HeadList.last,notHas))\r\n    return R.until(isStrict?cond:notHas,HeadList.last)(list)\r\n  }\r\n  static emptyList() {\r\n    return new HeadList([{}])\r\n  }\r\n  static isList(list) {\r\n    return R.has('head',list)\r\n  }\r\n}\r\n\r\nmodule.exports = HeadList","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst P = util.P\r\n\r\nconst syntax = require('./syntax')\r\nconst types = syntax.types\r\nconst op = syntax.op\r\n\r\nconst checkToken = type=>val=>R.whereEq({type:type,value:val})\r\nconst checkOper = checkToken(types.op)\r\nconst checkType = R.propEq('type')\r\n\r\nconst def = (func,obj)=>prop=>\r\n  Object.defineProperty(obj,prop[0],{\r\n    get:function(){\r\n      func(prop[1])\r\n      return obj}})\r\nfunction polymorph(store) {\r\n  return function ins(val) {\r\n    return R.ifElse(R.either(R.isNil,()=>R.isEmpty(store)),()=>ins, R.anyPass(store))(val)\r\n  }\r\n}\r\nconst appender = store=>val=>store.push(val)\r\nconst setter = (store,ins,dict)=>P(\r\n  R.toPairs,\r\n  R.forEach(\r\n    def(appender(store),ins)))(dict)\r\nfunction storage(dict) {\r\n  var store = []\r\n  var ins = polymorph(store)\r\n  Object.defineProperty(ins,'store',{get:function(){return store}})\r\n  setter(store,ins,dict)\r\n  return ins\r\n}\r\n\r\nconst eq = {\r\n  op:       R.map( checkOper )(op),\r\n  type:     R.map( checkType )(types),\r\n  typedVal: R.map( checkToken )(types)\r\n}\r\n\r\nconst equals = {}\r\nObject.defineProperty(equals,'op',{get:function(){return storage(eq.op)}})\r\nObject.defineProperty(equals,'type',{get:function(){return storage(eq.type)}})\r\nObject.defineProperty(equals,'typedVal',{get:function(){return storage(eq.typedVal)}})\r\n\r\n\r\n\r\nmodule.exports = {eq,equals}","const R = require('ramda')\r\n\r\nconst util = require('./util')\r\nconst S = util.S\r\n\r\nconst P = util.P\r\nconst log = util.log('tree')\r\n// const pipelog = util.pipelog('tree')\r\n\r\nconst HeadList = require('./model/head-list')\r\n\r\nclass Print {\r\n  static _indexTag(tag) {\r\n    return (e,separ=' ')=>P(util.arrayify,R.prepend(tag),R.join(separ),log)(e)\r\n  }\r\n  static arr(tag,arr){\r\n    let iTag = Print._indexTag(tag)\r\n    return arr.forEach((e,i)=>iTag(i)(e))\r\n  }\r\n  static get funcReplace() {return R.when(P(R.last,R.is(Function)),e=>[e[0],'FUNC'])}\r\n  static get pair(){\r\n    return P(R.toPairs,R.map(Print.funcReplace()))}\r\n  static to(func) {return P(S.maybeToNullable,func)}\r\n  // static get typeOrOper() {return R.ifElse(isOperator,prop.val,prop.type)}\r\n  static headList(tag,data,index=0,level=0) {\r\n    const iTag = Print._indexTag(tag)\r\n    const padd = '   '\r\n    const joinPadd = P(R.repeat(padd),R.join(''))\r\n    const objKeys = ['value']\r\n    const keyValPrint = padding=>e=>iTag(['  ',joinPadd(level),padding,e[0]],'')(e[1])\r\n    const tokenPrint = keys=>P(R.props(keys),R.zip(keys),R.forEach(keyValPrint(padd)))\r\n    const isRealIndex = i=>i===-1?'#  ':i+1+((i+1)>=10?' ':'  ')\r\n    const nextLevel = R.add(2,level)\r\n    if (HeadList.isList(data)) {\r\n      keyValPrint(isRealIndex(index))([data.lexeme,data.index])\r\n      Print.headList(tag,data.head,-1,nextLevel)\r\n      if (HeadList.hasTail(data))\r\n        data.tail.forEach((e,i)=>Print.headList(tag,e,i,nextLevel))\r\n    } else {\r\n      keyValPrint(isRealIndex(index))([data.type,data.index])\r\n      tokenPrint(objKeys)(data)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Print","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\n\r\nconst P = util.P\r\nconst RP = util.RP\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\nconst prop = util.prop\r\n\r\nconst Lexeme = require('../model/lexeme')\r\nconst HeadList = require('../model/head-list')\r\n\r\nconst types = require('../lang/syntax').types\r\nconst tool = require('../lang/tooling')\r\nconst eq = tool.equals\r\nconst Print = require('../print')\r\n\r\nconst tapArr = tag=> R.tap(e=>e.map((o,i)=>pipelog(tag+' '+i)(o)))\r\n// const example = \"tokens :: Array prop 'type' indexOf _ 'tokens' equals -1 not\"\r\n// const exampleNoDef = \"prop 'type' indexOf _ 'tokens' equals -1 not\"\r\n//const onChecking = P(  R.prepend(  R.take(2) , R.equals('|>') ) , R.apply(R.ifElse) )\r\n//const __tranducer = P(R.ifElse(P(R.prop('value'),R.propEq('type','R')),P(R.prop('value'),R.of,R.append)),R.map)\r\n// const exampleTrans = \"ifElse <| prop 'value' propEq 'type' 'R' <|> prop 'value' of append |> map\" // _ identity\r\n\r\n// const isTokenCat = tokenArray=>P(prop.type,util.isContainOrEq(tokenArray))\r\n\r\nconst eitherToMaybe = R.map(S.eitherToMaybe)\r\n\r\nfunction indexation(data) {\r\n  const indexPipe = (e,i)=>S.lift(R.assoc('index',i))(e)\r\n  const _indexation = list=>list.map(indexPipe)\r\n  return _indexation(data)\r\n}\r\n\r\nconst valEq = R.propEq('value')\r\nconst check =func=> e=>R.both(S.isRight,valEq(true))(S.lift(func,e))\r\nfunction stageHeader(data) {\r\n  const eiSplitOn = func=>P(R.splitWhen(check(func)), R.adjust(R.tail,1))\r\n\r\n  const split = {\r\n    context:eiSplitOn(eq.op.doubledots),\r\n    define:eiSplitOn(eq.op.define)\r\n  }\r\n  const writeField = (field,obj)=>res=>{\r\n    if (R.isEmpty(res[1])) {\r\n      obj[field] = false\r\n      return res[0]\r\n    } else {\r\n      obj[field] = S.rights(res[0])\r\n      return res[1]\r\n    }\r\n  }\r\n  let props = {}\r\n  let res = P(split.define,writeField('define',props),split.context,writeField('context',props))\r\n  props.data = res(data)\r\n  return props\r\n}\r\n\r\nfunction headSplitter(isMaster,onMaster,changeLast) {\r\n  const lensLast = RP().length.dec.lensIndex.run\r\n  const onEmpty = e=>R.append(Lexeme.Pipe(new HeadList([e])))\r\n  const onSlave =\r\n    e=>list=>\r\n        R.ifElse(\r\n          R.isEmpty,\r\n          onEmpty(e),\r\n          R.over(\r\n            lensLast(list),\r\n            changeLast(e)\r\n          ))(list)\r\n  const tranducer = R.map(R.ifElse(isMaster,onMaster,onSlave))\r\n  return R.transduce(tranducer,(acc,val)=>val(acc))\r\n}\r\nfunction intoAtomics(data) {\r\n  const changeLast = e=>P(util.arrayify,R.append(e.value))\r\n  const isMaster = P(prop.val,eq.type.R.op.context)\r\n  const onMaster = P(prop.val,R.of,R.append)\r\n\r\n  const tr = headSplitter(isMaster,onMaster,changeLast)\r\n  return tr([],data)\r\n}\r\nfunction intoPipes(data) {\r\n  const changeLast = e=>hList=>hList.append(e)\r\n  const pipeSymbols = eq.op\r\n    .forwardpipe\r\n    .middlepipe\r\n    .backpipe\r\n  const isMaster = R.both(HeadList.isList,P(prop.head, pipeSymbols))\r\n  const onMaster = P(R.identity,R.append)\r\n\r\n  const tr = headSplitter(isMaster,onMaster,changeLast)\r\n  return tr([],data)\r\n}\r\n\r\nfunction checkReplace(data) {\r\n  const replacers = [\r\n    [eq.op.dash,types.any,R.__],\r\n    [eq.op.equals,types.R,R.equals],\r\n    [eq.op.plus,types.R,R.add],\r\n    [eq.op.minus,types.R,R.subtract],\r\n    [eq.op.map,types.R,R.map]\r\n  ]\r\n  const replacer = (type,value)=>e=>{\r\n    e.value = value\r\n    e.type = type\r\n    return e\r\n  }\r\n  const doCheckReplace = (checker,type,value)=>R.map(R.when(checker,replacer(type,value)))\r\n  const reducer = (acc,val)=>doCheckReplace(...val)(acc)\r\n  return R.reduce(reducer,data,replacers)\r\n}\r\nconst taplog = tag=>R.tap(e=>Print.headList(tag,e,-1))\r\nfunction lexemize(data) {\r\n  const whenHeadIsDo = (cond,action)=>R.when(P.P2(prop.head,cond),action)\r\n  const detectAtomic = whenHeadIsDo(eq.type.R.context , Lexeme.AtomicFunc)\r\n  const detectExpr   = whenHeadIsDo(eq.type.op , Lexeme.Expression)\r\n  const detecting = P(\r\n    e=>new HeadList(e),\r\n    detectAtomic,\r\n    detectExpr,taplog('detectExpr ')\r\n    )\r\n  const lexemizing = P(\r\n    S.lift(checkReplace),tapArr('checkReplace'),\r\n    intoAtomics,pipelog('intoAtomics'),\r\n    R.map(detecting))\r\n  return lexemizing(data)\r\n}\r\nfunction addArgName(data) {\r\n  const morph = e=>R.when(eq.type.arg.context,R.assoc('argName',e.value))(e)\r\n  const apply = e=>S.Right(morph).ap(e)\r\n  return R.map(apply,data)\r\n}\r\nfunction getSyntaxTree(data) {\r\n  const treePipe = P(\r\n    indexation,tapArr('indexation'),\r\n    addArgName,tapArr('argName'),\r\n    eitherToMaybe,\r\n    lexemize,//tapArr('lexemize'),\r\n    intoPipes\r\n    )\r\n  const setTree = P(stageHeader,e=>R.assoc('tree',treePipe(e.data),e))\r\n  return setTree(data)\r\n}\r\n\r\nmodule.exports = getSyntaxTree\r\n\r\n\r\n// var ex = `marked handler defObj :: if <== is Array <- [^] <| propOr @defObj 'value' assoc 'mark' @marked ] <- handler 'notList'`\r\n\r\n\r\n// function listMark(marked, handler, defObj) {\r\n//   return function(data) {\r\n//     var result\r\n//     if (R.is(Array,data)) {\r\n//       result = data.map(function(e){\r\n//         var prop = e.value || defObj\r\n//         prop.mark = marked\r\n//         return prop\r\n//       })\r\n//     } else {\r\n//       result = handler('notList',data)\r\n//     }\r\n//     return result\r\n//   }\r\n// }","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\n\r\nconst P = util.P\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\n\r\nconst HeadList = require('../model/head-list')\r\nconst Lexeme = require('../model/lexeme')\r\n\r\nconst tool = require('../lang/tooling')\r\n\r\n\r\nconst eqOp = tool.eq.op\r\nconst stateNames = ['pipe','open','mid','close']\r\nconst states = {\r\n  empty:0,\r\n  pipe:1,\r\n  open:2,\r\n  mid:3,\r\n  close:4\r\n}\r\nconst actions = {\r\n  next:0,\r\n  child:1,\r\n  parent:-1,\r\n  error:NaN\r\n}\r\nconst opCond = opVal => R.both(Lexeme.its.expr, P(util.prop.head,opVal))\r\nconst stateConds = {\r\n  pipe:Lexeme.its.pipe,\r\n  open:opCond(eqOp.backpipe),\r\n  mid:opCond(eqOp.middlepipe),\r\n  close:opCond(eqOp.forwardpipe)\r\n}\r\nconst stConds = R.cond(R.append([R.T,states.pipe],R.map(e=>[stateConds[e],()=>states[e]],stateNames)))\r\n\r\nconst switches = [\r\n  [NaN,1,1,NaN,1], // empty\r\n  [NaN,0,1,NaN,0], // pipe\r\n  [NaN,-1,1,0,-1], // open\r\n  [NaN,-1,1,0,-1], // mid\r\n  [NaN,0,1,NaN,0]  // close\r\n]\r\nfunction optimise(data) {\r\n  const exprToPipe = R.when(Lexeme.its.expr,P(util.prop.tail,e=>new HeadList(e), Lexeme.Pipe))\r\n  const singlePipeToAtomic = R.when(R.both(Lexeme.its.pipe,P(HeadList.hasTail,R.not)),util.prop.head)\r\n  return P(exprToPipe,singlePipeToAtomic)(data)\r\n}\r\nfunction Stack() {\r\n  const appendTo = obj=>e=>obj.append(e)\r\n  this.value = []\r\n  this.push = obj=>this.value.push(appendTo(obj))\r\n  this.pushLast = result=>this.push(HeadList.lastR(result,true))\r\n  this.pop = ()=>this.value.pop()\r\n  this.addToLast = val=>R.last(this.value)(val)\r\n}\r\n\r\nfunction convolve(dataPack) {\r\n  let data = dataPack.tree\r\n  if (!R.is(Array,data)) return S.Left('No array recieved')\r\n  let result = HeadList.emptyList()\r\n  let stack = new Stack()\r\n  let state = states.empty\r\n  let i = 0,\r\n      len = data.length\r\n  while(i<len) {\r\n    let e = data[i++]\r\n    let nextState = stConds(e)\r\n    let doAction = switches[state][nextState]\r\n    switch(doAction) {\r\n      case actions.child:\r\n        stack.pushLast(result)\r\n        break\r\n      case actions.parent:\r\n        stack.pop()\r\n        break\r\n    }\r\n    state = nextState\r\n    stack.addToLast(optimise(e))\r\n  }\r\n  dataPack.tree = P(Lexeme.Pipe,optimise)(result)\r\n\r\n  return dataPack\r\n}\r\n\r\nmodule.exports = convolve","const util = require('../util')\r\nconst R = require('ramda')\r\nconst P = util.P\r\nconst log = util.pipelog('tree')\r\nconst pipelog = util.pipelog('tree')\r\n\r\nfunction Outfall() {\r\n  this.id = Math.round(Math.random() * 10e5)\r\n  this.updated = false\r\n  this._data = null\r\n}\r\n\r\nObject.defineProperty(Outfall, 'gate', { get: function () { return new Outfall() } })\r\nObject.defineProperty(Outfall.prototype, 'pipe', {\r\n  get: function () {\r\n    let self = this\r\n    return function (data) {\r\n      self.updated = true\r\n      self._data = data\r\n      return data[0]\r\n    }\r\n  }\r\n})\r\n\r\nOutfall.prototype.Spout = function (index,isArg = true) {\r\n  return Spout(this, index, isArg)\r\n}\r\n\r\nfunction Spout(parent, index,isArg) {\r\n  let spout = Object.create(parent, {\r\n    data: { get: function () { return parent._data }, enumerable: true },\r\n    index: { get: function() { return index }, enumerable: true },\r\n    id: { get: function () { return parent.id }, enumerable: true },\r\n    isArg: { value: isArg, enumerable: true }\r\n  })\r\n  Object.defineProperty(spout, 'pipe', { value:\r\n    function () {\r\n      log('spout pipe')(spout.data[spout.index],spout)\r\n      if(R.isNil(spout.data)) return null\r\n      return spout.isArg\r\n        ? spout.data[spout.index]\r\n        : spout.data[spout.index] },\r\n    enumerable: true })\r\n  return spout\r\n}\r\n\r\n// let stream = Outfall.gate\r\n// let joint = stream.Spout()\r\n\r\nmodule.exports = Outfall","\"use strict\";\r\nconst R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst P = util.P\r\nconst S = util.S\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\nconst prop = util.prop\r\n\r\nconst eq = require('../lang/tooling').equals\r\n\r\nconst HeadList = require('../model/head-list')\r\nconst types = require('../lang/syntax').types\r\nconst Lexeme = require('../model/lexeme')\r\n\r\nconst chain = func=>o=>o.chain(func)\r\nclass IndexMap {\r\n  static get indexation() {\r\n    return R.addIndex(R.map)((e,i)=>R.pair(e.value,i))\r\n  }\r\n  constructor(context) {\r\n    let arr = IndexMap.indexation(context)\r\n    log('index map')(arr)\r\n    this._map = new Map(arr)\r\n  }\r\n  get has() {\r\n    let self = this._map\r\n    return function(e){return self.has(e)}\r\n  }\r\n  get get() {\r\n    let self = this._map\r\n    return function(e){return self.get(e)}\r\n  }\r\n  get hasVal() {\r\n    let has = this.has\r\n    return P(prop.val,has)\r\n  }\r\n}\r\nfunction fillUserData(userData,dataPack) {\r\n  let indexMap = new IndexMap(dataPack.context||[]) //TODO create dataPack.context as empty array\r\n  const isArgOrCont = eq.type.arg.context\r\n  const morpher = HeadList.cyclic(modify)\r\n  dataPack.tree = morpher(dataPack.tree)\r\n  function modify(e) {\r\n\r\n    if (!isArgOrCont(e)) return e\r\n    log('ee')(e,isArgOrCont(e))\r\n    if (!indexMap.hasVal(e))\r\n      log('ERRRROR!')(e)\r\n    let argIndex = indexMap.get(e.value)\r\n    let getArg = userData[argIndex]\r\n    log('refs')(e.type,argIndex,getArg)\r\n    // e.value = dataPack.gate.Spout(argIndex,eq.type.arg(e)).pipe\r\n    e.value = getArg\r\n    return e\r\n  }\r\n  return dataPack\r\n}\r\nmodule.exports = {fillUserData}","const R = require('ramda')\r\nconst HeadList = require('../model/head-list')\r\nconst Lexeme = require('../model/lexeme')\r\nconst util = require('../util')\r\nconst P = util.P\r\nconst pipelog = util.pipelog('tree')\r\nconst Outfall = require('../model/outfall')\r\nconst eq = require('../lang/tooling').equals\r\n\r\nconst Context = require('./context')\r\n\r\nfunction CompileException(obj) {\r\n  this.message = `Can not compile object ${obj}`\r\n  this.name = \"Compile exeption\"\r\n}\r\n\r\nfunction collectData(obj) {\r\n  const collect = R.cond([\r\n    [R.is(Array),sayPipe],\r\n    [Lexeme.its.pipe,sayPipe],\r\n\r\n    // [eq.type.arg,P(pipelog('arg'),R.prop('pipe'))],\r\n    [Lexeme.its.atomic,sayAtomic],\r\n    [P(HeadList.isList,R.not),util.prop.val],\r\n    [R.T,e=>{throw new CompileException(e)}]\r\n  ])\r\n  return collect(obj)\r\n}\r\n\r\nfunction sayPipe(list) {\r\n  const normalize = R.when(HeadList.isList,R.prop('toArray'))\r\n  return P(normalize,R.map(collectData),R.apply(R.pipe))(list)\r\n}\r\n\r\nfunction sayAtomic(list) {\r\n  const applyTailToHead =\r\n    ()=>R.apply(\r\n      collectData(list.head),\r\n      R.map(collectData,list.tail))\r\n  return HeadList.hasTail(list)\r\n    ? applyTailToHead()\r\n    : collectData(list.head)\r\n}\r\n\r\nconst contextArgs = P(\r\n  R.when(R.equals(false),()=>[]),\r\n  R.when(\r\n    util.isof.Empty,\r\n    R.append({type:'fakeContext',value:'data'})),\r\n  R.map(util.prop.val))\r\n\r\nfunction Runner (dataPack) {\r\n  let obj = function(...userArgs) {\r\n    dataPack.gate.pipe(userArgs)\r\n    let filled = Context.fillUserData(userArgs,dataPack)\r\n    let render = collectData(filled.tree)\r\n    return render(...userArgs)\r\n  }\r\n  Object.defineProperty(obj,'data',{\r\n    value:dataPack\r\n  })\r\n  Object.defineProperty(obj,'source',{get:\r\n    function() { return obj.data.source }\r\n  })\r\n  Object.defineProperty(obj,'args',{get:\r\n    function() { return contextArgs(obj.data.context) }\r\n  })\r\n  return obj\r\n}\r\n\r\nfunction say(sourceString) {\r\n  return function(dataPack) {\r\n    dataPack.source = sourceString\r\n    dataPack.gate = Outfall.gate\r\n    return new Runner(dataPack)\r\n  }\r\n}\r\n\r\nsay.sayPipe = sayPipe\r\nsay.collectData = collectData\r\n\r\nmodule.exports = say","const R = require('ramda')\r\n\r\nconst preproc = require('./core/string-preprocess')\r\nconst getTree = require('./core/tree')\r\nconst convolve = require('./core/convolve')\r\nconst Speak = require('./core/say')\r\n\r\nconst util = require('./util')\r\nconst P = util.P\r\nconst log = util.log('index')\r\nconst pipelog = util.pipelog('index')\r\nconst Print = require('./print')\r\n\r\n\r\n\r\nconst taplog = tag=>R.tap(e=>Print.headList(tag,e.tree,-1))\r\n\r\nconst maptaphead = tag=> R.tap(P(\r\n  R.prop('tree'),\r\n  R.map(e=>Print.headList(tag,e,-1))))\r\n\r\nconst mapprint = tag => R.tap(R.map(pipelog(tag)))\r\n\r\nfunction say(data) {\r\n  return P(\r\n    preproc,mapprint('preproc')\r\n    ,getTree,maptaphead('getTree')\r\n    ,convolve,taplog('conv')\r\n    ,Speak(data)\r\n    )(data)\r\n}\r\n\r\nconst pureExample = \"indexes data sright :: head prop 'index' append <| _ <|> @data |> unnest sright\"\r\nconst simple = \"when <| == 1 not <|> + 10 |> + 100\"\r\n// const pure = P( R.when(P(R.equals(1),R.not),R.add(10)),R.add(100))\r\n\r\n// let convolved = say(pureExample)\r\nlog('example')(pureExample)\r\n\r\n// Print.headList('conv',convolved,-1)\r\nlet word = say(pureExample)\r\nlet indexes = [{index:[1,3]},{index:[0,1,2,3]},0]\r\nlet dat = [0,5,20,30,40,50]\r\nlet sright = R.objOf('result')\r\n// let flipap = R.flip(R.append)\r\nlet res = word(indexes,dat,sright)\r\nlog('res')(res)\r\n\r\nmodule.exports = say"],"names":["op","types","jstypes","Array","Number","String","Function","Object","RegExp","quotes","categories","R","context","lex","number","string","type","any","lexemeTypes","exports","require$$1","require$$0","TokenFabric","curry","category","obj","map","e","def","func","prop","appender","_store","push","val","setter","store","ins","dict","pipe","toPairs","forEach","polymorph","pop","storage","defineProperty","get","RP","do","Red","acc","append","reducer","add","transduce","compose","_filter","flatten","when","is","_P","filter","tr","accum","ifElse","flip","concat","pipes","filtered","filtP","either","P","check","_P2","pipe1","pipe2","data","P2","value","funcs","require$$4","debug","require$$3","require$$2","pipefy","isof","isNil","isEmpty","tagvalue","tag","mess","Nil","join","log","pipelog","tap","arrayify","defaultTo","unless","of","isContainOrEq","contains","create","env","checkTypes","S","isString","syntax","Token","util","tokenType","condition","transformation","onCondition","allPass","__","F","appendArray","addSteps","Right","transformUntouched","identity","quoteProcessor","isQuote","anyPass","equals","isQuoted","head","last","removeQuotes","init","tail","trim","typesProcessor","isInMap","has","Type","isNumber","isFinite","parseFloat","vendorProcessor","isFunc","isRamda","contextValidation","match","str","isContext","Context","argValidation","both","isArg","Arg","preprocess","lift","postprocess","operators","values","toPipe","stringMorpher","morph","stringTrim","rejectEmpty","reject","opersFuncs","split","Operator","intersperse","constFuncs","unnest","splitCond","cond","symb","T","unnester","symbPipe","splitsPipe","ap","splitter","cleaner","execFuncs","exec","fab","singleWordParsing","isType","isVendor","splitKeywords","err","Error","beforeSplit","sSort","Left","_drops","a","b","propEq","eqProps","drops","dropRepeatsWith","un","unary","ILexeme","typename","index","lexeme","Lexeme","tokensHList","atomic","expr","arg","token","eq","HeadList","rawList","prepend","length","list","isList","cyclic","hasTail","isStrict","_hasTail","notHas","not","until","checkToken","whereEq","checkOper","checkType","typedVal","Print","separ","arr","iTag","_indexTag","i","maybeToNullable","level","padd","joinPadd","repeat","objKeys","keyValPrint","padding","tokenPrint","props","keys","zip","isRealIndex","nextLevel","headList","funcReplace","require$$6","require$$5","tool","tapArr","o","eitherToMaybe","indexation","indexPipe","assoc","_indexation","valEq","isRight","stageHeader","eiSplitOn","splitWhen","adjust","doubledots","define","writeField","field","res","rights","headSplitter","isMaster","onMaster","changeLast","lensLast","dec","lensIndex","run","onEmpty","Pipe","onSlave","over","tranducer","intoAtomics","intoPipes","hList","pipeSymbols","forwardpipe","middlepipe","backpipe","checkReplace","replacers","dash","plus","minus","subtract","replacer","doCheckReplace","checker","reduce","taplog","lexemize","whenHeadIsDo","action","detectAtomic","AtomicFunc","detectExpr","Expression","detecting","lexemizing","addArgName","apply","getSyntaxTree","treePipe","setTree","eqOp","stateNames","states","actions","NaN","opCond","its","opVal","stateConds","stConds","switches","optimise","exprToPipe","singlePipeToAtomic","Stack","appendTo","pushLast","lastR","result","addToLast","convolve","dataPack","tree","emptyList","stack","state","empty","len","nextState","doAction","child","parent","Outfall","id","Math","round","random","updated","_data","prototype","self","Spout","spout","enumerable","chain","IndexMap","addIndex","pair","_map","fillUserData","userData","indexMap","isArgOrCont","morpher","modify","hasVal","argIndex","getArg","CompileException","message","name","collectData","collect","sayPipe","sayAtomic","normalize","applyTailToHead","contextArgs","Empty","Runner","userArgs","gate","filled","render","source","say","sourceString","preproc","getTree","Speak","maptaphead","mapprint","pureExample","simple","word","indexes","dat","sright","objOf"],"mappings":"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"}