{"version":3,"file":null,"sources":["../app/syntax.js","../app/token.js","../app/util.js","../app/fabric.js","../app/lexeme.js","../app/head-list.js","../app/tree.js","../app/splitter.js","../app/string-preprocess.js","../app/convolve.js","../app/print.js","../app/say.js","../app/index.js"],"sourcesContent":["const R = require('ramda')\r\n\r\nconst types = ['type','R','string','number','operator','any','context','lexeme']\r\nconst typesDict = R.pipe(R.map(R.repeat(R.__,2)),R.fromPairs)(types)\r\nconst typeCats = {\r\n  piped:[types.R,types.context,types.lexeme],\r\n  inserted:[types.number,types.string,types.type,types.any],\r\n  control:[types.operator]\r\n}\r\n\r\nconst syntax = {\r\n  pipe:'|>',\r\n  toLast:'<-',\r\n  quotes:['\"',\"'\",'`'],\r\n  operators:['=>','->',',','<~','<-','_','<|>','|>','<|','==','+','-','^','!=','@','::'],\r\n  op:{\r\n    doubledots:'::',\r\n    comma:',',\r\n    dash:'_',\r\n    arrow:'->',\r\n    doublearrow:'=>',\r\n    backpipe:'<|',\r\n    middlepipe:'<|>',\r\n    forwardpipe: '|>',\r\n    equals:'==',\r\n    plus:'+',\r\n    minus:'-',\r\n    map:'^'\r\n  },\r\n  type:{\r\n    list:types,\r\n    dict:typesDict,\r\n    cats:typeCats\r\n  }\r\n}\r\nmodule.exports = syntax","const R = require('ramda')\r\n\r\n/*class Token {\r\n  constructor(type,value) {\r\n    this.type = type\r\n    this.value = value\r\n  }\r\n  // toString(){return `type ${this.type}\\nvalue ${this.value}`+this.index?`${this.index}`:''}\r\n}*/\r\n\r\nconst TokenFabric = R.curry((category,obj)=>{\r\n  return /*new Token(category,obj)*/{\r\n    type:category,\r\n    value:obj\r\n  }\r\n})\r\n\r\nmodule.exports = {\r\n  Type:     TokenFabric('type'),\r\n  R:        TokenFabric('R'),\r\n  String:   TokenFabric('string'),\r\n  Number:   TokenFabric('number'),\r\n  Operator: TokenFabric('operator'),\r\n  Any:      TokenFabric('any'),\r\n  Context:  TokenFabric('context')\r\n}","const R = require('ramda')\r\nconst debug = require('debug')\r\n\r\nconst tagvalue = (tag,mess)=>R.isNil(mess) ? tag : [tag,mess].join(':  ')\r\nconst log = tag=>mess=>debug(tagvalue(tag,mess))\r\nconst pipelog = tag=>mess=>R.tap(log(tag)(mess))\r\n\r\nconst toPipe = R.apply(R.pipe)\r\n\r\nconst pRed = (acc,val)=>R.ifElse(R.is(Array),R.concat(acc),R.append(R.__,acc))(val)\r\nconst P = (...pipes)=>toPipe(R.reduce(pRed,[],pipes))\r\n\r\nconst arrayify = R.unless(R.is(Array),R.of)\r\nconst isContainOrEq = P(arrayify,R.flip(R.contains))\r\n\r\nconst isString = R.is(String)\r\n\r\nconst prop = {\r\n  type:R.prop('type'),\r\n  val:R.prop('value'),\r\n  head:R.prop('head'),\r\n  tail:R.prop('tail')\r\n}\r\nmodule.exports = {\r\n  pipelog,log,isString,arrayify,toPipe,P,isContainOrEq,prop\r\n}","const R = require('ramda')\r\nconst S = require('sanctuary')\r\nconst syntax = require('./syntax.js')\r\n\r\nconst Token = require('./token.js')\r\nconst util = require('./util')\r\nconst isString = util.isString\r\nconst log = util.log('fabric')\r\nconst pipelog = util.pipelog('fabric')\r\n\r\nconst TokenFabric = (tokenType, condition, transformation) => {\r\n  const onCondition = R.pipe(util.arrayify, R.allPass, S.either(R.__, R.F))\r\n  const addSteps = R.flip(R.concat)([tokenType, S.Right])\r\n  const transformUntouched = R.pipe(\r\n    R.defaultTo([]),\r\n    util.arrayify,\r\n    addSteps,\r\n    util.toPipe,\r\n    S.either(R.__, R.identity))\r\n  return R.when(onCondition(condition), transformUntouched(transformation))\r\n}\r\n\r\nconst quoteProcessor = function () {\r\n  const isQuote = R.anyPass(R.map(R.equals, syntax.quotes))\r\n  const isQuoted = R.allPass(R.map(e => R.pipe(e, isQuote), [R.head, R.last]))\r\n  const removeQuotes = R.pipe(R.init, R.tail)\r\n  return TokenFabric(Token.String, [isString, isQuoted], [R.trim, removeQuotes])\r\n}\r\nconst typesProcessor = () => {\r\n  const _types = [\r\n    ['Array', Array],\r\n    ['Number', Number],\r\n    ['String', String],\r\n    ['Function', Function],\r\n    ['Object', Object],\r\n    ['Null', null],\r\n    ['RegExp', RegExp]]\r\n  const types = new Map(_types)\r\n  const isInMap = obj => isString(obj) ? types.has(obj) : false\r\n  return TokenFabric(Token.Type, isInMap, e => types.get(e))\r\n}\r\n\r\nconst isntModifed = R.propOr(true, 'isLeft')\r\nconst isNumber = TokenFabric(Token.Number, isFinite, parseFloat)\r\nconst vendorProcessor = () => {\r\n  const isFunc = R.is(Function)\r\n  const isRamda = obj => isFunc(R[obj])\r\n  return TokenFabric(Token.R, [isString, isRamda], R.prop(R.__, R))\r\n}\r\nconst contextValidation = str => R.pipe(R.match(/\\D\\w+/), R.head, R.equals(str))(str)\r\nconst isContext = TokenFabric(Token.Context, contextValidation)\r\n\r\nconst preprocess = S.lift(R.when(isString, R.trim))\r\nconst postWarn = R.pipe(R.identity, R.assoc('warning', 'left-sided value'))\r\nconst postprocess = R.identity\r\nmodule.exports = {\r\n  isQuote: quoteProcessor(),\r\n  isType: typesProcessor(),\r\n  isVendor: vendorProcessor(),\r\n  isNumber,\r\n  isContext,\r\n  preprocess,\r\n  postprocess\r\n}","const R = require('ramda')\r\n\r\n// const HeadList = require('./head-list.js')\r\n\r\nconst lexemeTypes = {\r\n  pipe:'Pipe',\r\n  context:'Context',\r\n  atomic:'AtomicFunc',\r\n  expr:'Expression'\r\n}\r\n\r\nclass ILexeme {\r\n  constructor(typename,obj) {\r\n    obj.index = obj.head.index\r\n    obj.lexeme = typename\r\n    return obj\r\n  }\r\n}\r\nclass Lexeme {\r\n  static Pipe(tokensHList) {\r\n    return new ILexeme(lexemeTypes.pipe,tokensHList)\r\n  }\r\n  static AtomicFunc(tokensHList) {\r\n    return new ILexeme(lexemeTypes.atomic,tokensHList)\r\n  }\r\n  static Expression(tokensHList) {\r\n    return new ILexeme(lexemeTypes.expr,tokensHList)\r\n  }\r\n  static get its() {\r\n    const eq = R.propEq('lexeme')\r\n    return R.map(eq,lexemeTypes)\r\n  }\r\n  static Context(token) {\r\n    return new Lexeme(lexemeTypes.context,token)\r\n  }\r\n  constructor(typename,obj) {\r\n    console.error('\\n!!!!!!------------Used deprecated Lexeme object!\\n')\r\n    this.lexeme = typename\r\n    this.index = obj.index\r\n    this._value = obj.value\r\n    this.type = 'lexeme'\r\n  }\r\n  get value() {\r\n    console.error('\\n!!!!!!------------Used deprecated get method!\\n')\r\n    return this._value\r\n  }\r\n  set value(val) {\r\n    console.error('\\n!!!!!!------------Used deprecated set method!\\n')\r\n    this._value = val\r\n  }\r\n}\r\n\r\nmodule.exports = Lexeme","const R = require('ramda')\r\nconst S = require('sanctuary')\r\n\r\nconst util = require('./util')\r\n\r\nconst P = util.P\r\n\r\nclass HeadList {\r\n  constructor(rawList, head) {\r\n    if (!R.is(Array,rawList)||R.isEmpty(rawList)) return S.Left('No array recieved')\r\n    if (R.isNil(head)) {\r\n      this.head = R.head(rawList)\r\n      this.tail = R.tail(rawList)\r\n    } else {\r\n      this.head = head\r\n      this.tail = rawList||[]\r\n    }\r\n  }\r\n  map(func) {\r\n    return R.map(func,this.toArray)\r\n  }\r\n  get toArray() {\r\n    return R.prepend(this.head,this.tail)\r\n  }\r\n  get length() {\r\n    return R.defaultTo(0,this.tail.length)+R.isEmpty(this.head)?0:1\r\n  }\r\n  append(e) {\r\n    if (R.isEmpty(this.tail)&&R.isEmpty(this.head))\r\n      this.head = e\r\n    else\r\n      this.tail.push(e)\r\n    return this\r\n  }\r\n\r\n  static hasTail(list) {return R.has('tail',list)&&!R.isEmpty(list.tail)}\r\n  static last(list) {\r\n    return HeadList.hasTail(list)\r\n      ? R.last(list.tail)\r\n      : list.head\r\n  }\r\n  static lastR(list,isStrict=false) {\r\n    const _hasTail = R.has('tail')\r\n    const notHas = P(_hasTail,R.not)\r\n    const cond = R.either(notHas,P(HeadList.last,notHas))\r\n    return R.until(isStrict?cond:notHas,HeadList.last)(list)\r\n  }\r\n  static emptyList() {\r\n    return new HeadList([{}])\r\n  }\r\n  static isList(list) {\r\n    return R.has('head',list)\r\n  }\r\n}\r\n\r\nmodule.exports = HeadList","const R = require('ramda')\r\nconst S = require('sanctuary')\r\n\r\nconst util = require('./util')\r\n\r\nconst P = util.P\r\n// const log = util.log('tree')\r\n// const pipelog = util.pipelog('tree')\r\nconst prop = util.prop\r\n\r\n// const token = require('./token.js')\r\nconst syntax = require('./syntax.js')\r\nconst Lexeme = require('./lexeme.js')\r\nconst HeadList = require('./head-list.js')\r\n\r\n\r\n\r\n\r\n// const exec = require('./index.js')\r\n\r\nconst op = syntax.op\r\nconst types = syntax.type.dict\r\n// const example = \"tokens :: Array prop 'type' indexOf _ 'tokens' equals -1 not\"\r\n// const exampleNoDef = \"prop 'type' indexOf _ 'tokens' equals -1 not\"\r\n//const onChecking = P(  R.prepend(  R.take(2) , R.equals('|>') ) , R.apply(R.ifElse) )\r\n//const __tranducer = P(R.ifElse(P(R.prop('value'),R.propEq('type','R')),P(R.prop('value'),R.of,R.append)),R.map)\r\n// const exampleTrans = \"ifElse <| prop 'value' propEq 'type' 'R' <|> prop 'value' of append |> map\" // _ identity\r\n\r\nconst propEqVal = R.propEq('value')\r\n\r\nconst isTokenCat = tokenArray=>P(prop.type,util.isContainOrEq(tokenArray))\r\nconst isOperator = isTokenCat(types.operator)\r\n\r\n\r\n// const filterM = func=>e=>e.filter(func)\r\n// const filterMs = func=>P(R.map(filterM(func)),S.justs)\r\n// const indexOf = e => e.isJust ? e.value.index : NaN\r\n// const rangeMs = (min,max)=>R.map(R.reject(e=>indexOf(R.either(R.gt(max),R.lt(min)))))\r\n\r\n//TODO make isSymbol and other work through R.whereEq\r\nconst isSymbol = tokenPred => R.allPass([isOperator, propEqVal(tokenPred)])\r\nconst checkSymbol = R.map(isSymbol,op)\r\n\r\nfunction stringTokenTransform(data) {\r\n  const indexPipe = (e,i)=>S.lift(R.assoc('index',i))(e)\r\n  const indexation = list=>list.map(indexPipe)\r\n  return P(R.map(S.eitherToMaybe),indexation)(data)\r\n}\r\n\r\n// function stageHeader(data) {\r\n//   const errorFabric = text=>()=>S.Left(text)\r\n//   const err = R.map(errorFabric,{\r\n//     nothing:'Nothing finded',\r\n//     many:'Find more than one ::',\r\n//     other:'Undefined error'\r\n//   })\r\n//   const findDD = filterMs(checkSymbol.doubledots)\r\n//   const split = P(R.head,R.prop('index'),R.splitAt(R.__,data),S.Right)\r\n//   const indexChanger = P(R.lensIndex,R.over)\r\n//   const over = {\r\n//     head:indexChanger(0),\r\n//     body:indexChanger(1)\r\n//   }\r\n//   const headChange = P(filterMs(isTokenCat(types.context)),R.map(P(Lexeme.Context,S.Maybe.of)))\r\n//   const headContextMounter = S.either(S.Left,P(over.head(headChange),over.body(R.tail),S.Right))\r\n//   const cond = R.cond([\r\n//     [R.isEmpty,err.nothing],\r\n//     [e=>R.gt(R.length(e),1),err.many],\r\n//     [e=>R.equals(R.length(e),1),split],\r\n//     [R.T,err.other]\r\n//   ])\r\n\r\n//   return P(findDD,cond,headContextMounter)(data)\r\n// }\r\nfunction headSplitter(isMaster,onMaster,changeLast) {\r\n  const lensLast = P(R.length,R.dec,R.lensIndex)\r\n  const onEmpty = e=>R.append(Lexeme.Pipe(new HeadList([e])))\r\n  const onSlave = e=>list=>R.ifElse(R.isEmpty,\r\n    onEmpty(e),\r\n    R.over(lensLast(list),changeLast(e)))(list)\r\n  const tranducer = R.map(R.ifElse(isMaster,onMaster,onSlave))\r\n  return R.transduce(tranducer,(acc,val)=>val(acc))\r\n}\r\nfunction intoAtomics(data) {\r\n  const changeLast = e=>P(util.arrayify,R.append(e.value))\r\n  const isMaster = P(prop.val,isTokenCat([types.R,types.operator,types.context]))\r\n  const onMaster = P(prop.val,R.of,R.append)\r\n\r\n  const tr = headSplitter(isMaster,onMaster,changeLast)\r\n  return tr([],data)\r\n}\r\nfunction intoPipes(data) {\r\n  const changeLast = e=>hList=>hList.append(e)\r\n  const pipeSymbols = R.anyPass([\r\n    checkSymbol.forwardpipe,\r\n    checkSymbol.middlepipe,\r\n    checkSymbol.backpipe])\r\n  const isMaster = R.both(HeadList.isList,P(prop.head, pipeSymbols))\r\n  const onMaster = P(R.identity,R.append)\r\n\r\n  const tr = headSplitter(isMaster,onMaster,changeLast)\r\n  return tr([],data)\r\n}\r\n\r\nfunction checkReplace(data) {\r\n  const replacers = [\r\n    [checkSymbol.dash,types.any,R.__],\r\n    [checkSymbol.equals,types.R,R.equals],\r\n    [checkSymbol.plus,types.R,R.add],\r\n    [checkSymbol.minus,types.R,R.subtract],\r\n    [checkSymbol.map,types.R,R.map]\r\n  ]\r\n\r\n  const replacer = (type,value)=>e=>{\r\n    e.value = value\r\n    e.type = type\r\n    return e\r\n  }\r\n  const doCheckReplace = (checker,type,value)=>R.map(R.when(checker,replacer(type,value)))\r\n  const reducer = (acc,val)=>R.apply(doCheckReplace,val)(acc)\r\n  const doReplaceAll = rules=>data=>R.reduce(reducer,data,rules)\r\n  const replAll = doReplaceAll(replacers)\r\n  return replAll(data)\r\n}\r\n\r\nfunction lexemize(data) {\r\n  const detectAtomic = R.when(P(prop.head,isTokenCat(types.R)),Lexeme.AtomicFunc)\r\n  const detectExpr   = R.when(P(prop.head,isTokenCat(types.operator)),Lexeme.Expression)\r\n  // const piping = R.unless(R.has('lexeme'),Lexeme.Pipe)\r\n  const detecting = P(e=>new HeadList(e),detectAtomic,detectExpr)\r\n  const lexemizing = P(S.lift(checkReplace),intoAtomics,R.map(detecting))\r\n  return lexemizing(data)\r\n}\r\n\r\nfunction getSyntaxTree(data) {\r\n  return P(stringTokenTransform,lexemize,intoPipes)(data)\r\n}\r\n\r\n\r\n// let noDefData = stringTokenTransform(exampleNoDef)\r\n\r\n// let atomicList = lexemize(justData)\r\n// let pipedList = intoPipes(atomicList)\r\n// let convolved = convolve(pipedList)\r\n\r\n\r\n// Print.arr('toPrint',R.map(Print.to(Print.pair))(justData))\r\n\r\n// Print.arr('filtered',filterMs(isTokenCat(syntax.type.cats.control))(justData))\r\n\r\n// atomicList.forEach((e,i)=>Print.headList('atomic',e,i))\r\n// pipedList.forEach((e,i)=>Print.headList('piped',e,i))\r\n\r\n\r\n\r\nmodule.exports = getSyntaxTree","const R = require('ramda')\r\nconst util = require('./util')\r\n// const S = require('sanctuary')\r\n\r\nconst Token = require('./token.js')\r\nconst log = util.pipelog('splitter')\r\nconst operators = require('./syntax.js').operators\r\n\r\nconst toPipe = util.toPipe\r\nconst stringMorpher = morph=>R.map(R.when(util.isString,morph))\r\nconst stringTrim = stringMorpher(R.trim)\r\nconst rejectEmpty = R.reject(R.isEmpty)\r\n\r\nconst opersFuncs = [\r\n  R.split,\r\n  R.pipe(Token.Operator,R.intersperse)\r\n]\r\nconst constFuncs = [\r\n  rejectEmpty,\r\n  R.unnest\r\n]\r\n\r\nconst splitCond = symb=>R.cond([\r\n  [R.is(String),symb],\r\n  [R.T,log('uncaught')]\r\n])\r\nconst unnester = symbPipe=>R.pipe(\r\n  symbPipe,\r\n  R.unnest)\r\nconst splitsPipe = [\r\n  R.of,\r\n  R.ap(opersFuncs),\r\n  R.concat(R.__,constFuncs),\r\n  toPipe,\r\n  splitCond,\r\n  R.map,\r\n  unnester,\r\n  log('splitPipe')]\r\nconst splitter = R.pipe(toPipe,R.map(R.__,operators),toPipe)(splitsPipe)\r\nconst cleaner = R.pipe(R.unnest,stringTrim,rejectEmpty,log('end'))\r\nconst execFuncs = [\r\n  util.arrayify,\r\n  splitter,\r\n  cleaner]\r\nconst exec = toPipe(execFuncs)\r\nmodule.exports = {exec,cleaner}","const R = require('ramda')\r\nconst S = require('sanctuary')\r\n\r\nconst fab = require('./fabric.js')\r\n\r\nconst syntax = require('./syntax.js')\r\nconst tree = require('./tree.js')\r\nconst splitter = require('./splitter.js')\r\n\r\nconst util = require('./util')\r\n\r\nconst log = util.log('preproc')\r\nconst pipelog = util.pipelog('preproc')\r\nconst singleWordParsing =\r\n  R.pipe(\r\n    fab.preprocess,\r\n    pipelog('->isQuote'),\r\n    fab.isQuote,\r\n    pipelog('->isNumber'),\r\n    fab.isNumber,\r\n    pipelog('->isType'),\r\n    fab.isType,\r\n    pipelog('->isVendor'),\r\n    fab.isVendor,\r\n    pipelog('->isContext'),\r\n    fab.isContext,\r\n    pipelog('->postprocess'),\r\n    fab.postprocess)\r\nconst splitKeywords=\r\n  R.unary(R.pipe(\r\n    R.unless(util.isString, () => { throw new Error('`keywords` should be String'); }),\r\n\r\n    R.split(' '),\r\n\r\n    R.reject(R.isEmpty),\r\n    splitter.exec,\r\n    R.map(R.ifElse(R.is(Object),S.Right,S.Left)),\r\n    pipelog('тэг'),\r\n\r\n    R.map(singleWordParsing),\r\n    R.dropRepeatsWith((a,b)=>R.allPass([\r\n      R.propEq('type','operator'),\r\n      R.propEq('obj',','),\r\n      R.eqProps('obj',R.__,b)\r\n    ])(a))\r\n  ))\r\n\r\n\r\nmodule.exports = splitKeywords","const R = require('ramda')\r\nconst S = require('sanctuary')\r\n\r\nconst util = require('./util')\r\n\r\nconst P = util.P\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\n\r\nconst HeadList = require('./head-list.js')\r\nconst Lexeme = require('./lexeme.js')\r\nconst syntax = require('./syntax.js')\r\n\r\nconst types = syntax.type.dict\r\nconst op = syntax.op\r\nconst eq = type=>val=>R.whereEq({type:type,value:val})\r\n\r\nconst eqOp = eq(types.operator)\r\nconst stateNames = ['pipe','open','mid','close']\r\nconst states = {\r\n  empty:0,\r\n  pipe:1,\r\n  open:2,\r\n  mid:3,\r\n  close:4\r\n}\r\nconst actions = {\r\n  next:0,\r\n  child:1,\r\n  parent:-1,\r\n  error:NaN\r\n}\r\nconst opCond = opVal => R.both(Lexeme.its.expr, P(util.prop.head,eqOp(opVal)))\r\nconst stateConds = {\r\n  pipe:Lexeme.its.pipe,\r\n  open:opCond(op.backpipe),\r\n  mid:opCond(op.middlepipe),\r\n  close:opCond(op.forwardpipe)\r\n}\r\n\r\nconst switches = [\r\n  [NaN,1,1,NaN,1], // empty\r\n  [NaN,0,1,NaN,0], // pipe\r\n  [NaN,-1,1,0,-1], // open\r\n  [NaN,-1,1,0,-1], // mid\r\n  [NaN,0,1,NaN,0]  // close\r\n]\r\nfunction optimise(data) {\r\n  const exprToPipe = R.when(Lexeme.its.expr,P(util.prop.tail,e=>new HeadList(e), Lexeme.Pipe))\r\n  const singlePipeToAtomic = R.when(R.both(Lexeme.its.pipe,P(HeadList.hasTail,R.not)),util.prop.head)\r\n  return P(exprToPipe,singlePipeToAtomic)(data)\r\n}\r\nconst appendTo = obj=>e=>obj.append(e)\r\nfunction Stack() {\r\n  this.value = []\r\n  this.push = obj=>this.value.push(appendTo(obj))\r\n  this.pushLast = result=>this.push(HeadList.lastR(result,true))\r\n  this.pop = ()=>this.value.pop()\r\n  this.addToLast = val=>R.last(this.value)(val)\r\n}\r\nfunction convolve(data) {\r\n  if (!R.is(Array,data)) return S.Left('No array recieved')\r\n  var result = HeadList.emptyList()\r\n  let stack = new Stack()\r\n  let state = states.empty\r\n  const stConds = R.append([R.T,states.pipe],R.map(e=>[stateConds[e],()=>states[e]],stateNames))\r\n  let i = 0\r\n  while(i<data.length) {\r\n    var e = data[i]\r\n    let nextState = R.cond(stConds)(e)\r\n    let doAction = switches[state][nextState]\r\n    switch(doAction) {\r\n      case actions.child:\r\n        stack.pushLast(result)\r\n        break\r\n      case actions.parent:\r\n        stack.pop()\r\n        break\r\n    }\r\n    state = nextState\r\n    stack.addToLast(optimise(e))\r\n    i++\r\n  }\r\n  return P(Lexeme.Pipe,optimise)(result)\r\n}\r\n\r\nmodule.exports = convolve","const R = require('ramda')\r\nconst S = require('sanctuary')\r\n\r\nconst util = require('./util')\r\n\r\nconst P = util.P\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\n\r\nconst HeadList = require('./head-list.js')\r\n\r\nclass Print {\r\n  static _indexTag(tag) {\r\n    return (e,separ=' ')=>P(util.arrayify,R.prepend(tag),R.join(separ),log)(e)\r\n  }\r\n  static arr(tag,arr){\r\n    let iTag = Print._indexTag(tag)\r\n    return arr.forEach((e,i)=>iTag(i)(e))\r\n  }\r\n  static get funcReplace() {return R.when(P(R.last,R.is(Function)),e=>[e[0],'FUNC'])}\r\n  static get pair(){\r\n    return P(R.toPairs,R.map(Print.funcReplace()))}\r\n  static to(func) {return P(S.maybeToNullable,func)}\r\n  static get typeOrOper() {return R.ifElse(isOperator,prop.val,prop.type)}\r\n  static headList(tag,data,index=0,level=0) {\r\n    const iTag = Print._indexTag(tag)\r\n    const padd = '   '\r\n    const joinPadd = P(R.repeat(padd),R.join(''))\r\n    const objKeys = ['value']\r\n    const keyValPrint = padding=>e=>iTag(['  ',joinPadd(level),padding,e[0]],'')(e[1])\r\n    const tokenPrint = keys=>P(R.props(keys),R.zip(keys),R.forEach(keyValPrint(padd)))\r\n    const isRealIndex = i=>i===-1?'#  ':i+1+((i+1)>=10?' ':'  ')\r\n    const nextLevel = R.add(2,level)\r\n    if (HeadList.isList(data)) {\r\n      keyValPrint(isRealIndex(index))([data.lexeme,data.index])\r\n      Print.headList(tag,data.head,-1,nextLevel)\r\n      if (HeadList.hasTail(data))\r\n        data.tail.forEach((e,i)=>Print.headList(tag,e,i,nextLevel))\r\n    } else {\r\n      keyValPrint(isRealIndex(index))([data.type,data.index])\r\n      tokenPrint(objKeys)(data)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Print","const R = require('ramda')\r\n\r\nconst HeadList = require('./head-list.js')\r\nconst Lexeme = require('./lexeme.js')\r\nconst util = require('./util')\r\nconst P = util.P\r\n\r\nfunction CompileException(obj) {\r\n  this.message = `Can not compile object ${obj}`\r\n  this.name = \"Compile exeption\"\r\n}\r\n\r\nfunction collectData(obj) {\r\n  const collect = R.cond([\r\n    [R.is(Array),sayPipe],\r\n    [P(HeadList.isList,R.not),util.prop.val],\r\n    [Lexeme.its.pipe,sayPipe],\r\n    [Lexeme.its.atomic,sayAtomic],\r\n    [R.T,e=>{throw new CompileException(e)}]\r\n  ])\r\n  return collect(obj)\r\n}\r\n\r\nfunction sayPipe(list) {\r\n  const normalize = R.when(HeadList.isList,R.prop('toArray'))\r\n  return P(normalize,R.map(collectData),R.apply(R.pipe))(list)\r\n}\r\n\r\nfunction sayAtomic(list) {\r\n  return HeadList.hasTail(list)\r\n    ? R.apply(collectData(list.head),R.map(collectData,list.tail))\r\n    : collectData(list.head)\r\n}\r\n\r\nfunction say(data) {\r\n  return collectData(data)\r\n}\r\n\r\nmodule.exports = say","const R = require('ramda')\r\n// const S = require('sanctuary')\r\n\r\nconst preproc = require('./string-preprocess.js')\r\nconst getTree = require('./tree.js')\r\nconst convolve = require('./convolve.js')\r\n\r\nconst util = require('./util')\r\nconst P = util.P\r\nconst log = util.log('index')\r\n// const pipelog = util.pipelog('index')\r\nconst Print = require('./print.js')\r\nconst Say = require('./say.js')\r\n\r\nfunction say(data) {\r\n  return P(preproc,getTree,convolve,R.tap(e=>Print.headList('conv',e,-1)), Say)(data)\r\n}\r\n\r\nconst pureExample = \"when <| == 1 not <|> + 10 |> + 100\"\r\n// const pure = P( R.when(P(R.equals(1),R.not),R.add(10)),R.add(100))\r\n\r\n// let convolved = say(pureExample)\r\nlog('example')(pureExample)\r\n\r\n// Print.headList('conv',convolved,-1)\r\nlet word = say(pureExample)\r\nlet res = word(1)\r\nlog('word')(res)\r\n\r\nmodule.exports = say"],"names":["require$$0","require$$1","debug","require$$4","require$$3","syntax","require$$2","util","require$$5","require$$6","tree","splitter","convolve","say"],"mappings":";;;;;;;;;AAAA,MAAM,CAAC,GAAGA,UAAgB;AAE1B,MAAM,KAAK,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC;AAChF,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;AACpE,MAAM,QAAQ,GAAG;EACf,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;EAC1C,QAAQ,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;EACzD,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;CACzB;AAED,MAAM,MAAM,GAAG;EACb,IAAI,CAAC,IAAI;EACT,MAAM,CAAC,IAAI;EACX,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;EACpB,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;EACtF,EAAE,CAAC;IACD,UAAU,CAAC,IAAI;IACf,KAAK,CAAC,GAAG;IACT,IAAI,CAAC,GAAG;IACR,KAAK,CAAC,IAAI;IACV,WAAW,CAAC,IAAI;IAChB,QAAQ,CAAC,IAAI;IACb,UAAU,CAAC,KAAK;IAChB,WAAW,EAAE,IAAI;IACjB,MAAM,CAAC,IAAI;IACX,IAAI,CAAC,GAAG;IACR,KAAK,CAAC,GAAG;IACT,GAAG,CAAC,GAAG;GACR;EACD,IAAI,CAAC;IACH,IAAI,CAAC,KAAK;IACV,IAAI,CAAC,SAAS;IACd,IAAI,CAAC,QAAQ;GACd;CACF;AACD,MAAM,CAAC,OAAO,GAAG;;;;ACnCjB,MAAM,CAAC,GAAGA,UAAgB;AAU1B,MAAM,WAAW,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,GAAG,GAAG;EAC1C,kCAAkC;IAChC,IAAI,CAAC,QAAQ;IACb,KAAK,CAAC,GAAG;GACV;CACF,CAAC;AAEF,MAAM,CAAC,OAAO,GAAG;EACf,IAAI,MAAM,WAAW,CAAC,MAAM,CAAC;EAC7B,CAAC,SAAS,WAAW,CAAC,GAAG,CAAC;EAC1B,MAAM,IAAI,WAAW,CAAC,QAAQ,CAAC;EAC/B,MAAM,IAAI,WAAW,CAAC,QAAQ,CAAC;EAC/B,QAAQ,EAAE,WAAW,CAAC,UAAU,CAAC;EACjC,GAAG,OAAO,WAAW,CAAC,KAAK,CAAC;EAC5B,OAAO,GAAG,WAAW,CAAC,SAAS,CAAC;;;;;ACxBlC,MAAM,CAAC,GAAGC,UAAgB;AAC1B,MAAMC,QAAK,GAAGF,KAAgB;AAE9B,MAAM,QAAQ,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;AACzE,MAAM,GAAG,GAAG,GAAG,EAAE,IAAI,EAAEE,QAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChD,MAAM,OAAO,GAAG,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;AAEhD,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;AAE9B,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;AACnF,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;AAErD,MAAM,QAAQ,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAC3C,MAAM,aAAa,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;AAEpD,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC;AAE7B,MAAM,IAAI,GAAG;EACX,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;EACnB,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;EACnB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;EACnB,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;CACpB;AACD,MAAM,CAAC,OAAO,GAAG;EACf,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI;;;;;ACxB3D,MAAM,CAAC,GAAGC,UAAgB;AAC1B,MAAM,CAAC,GAAGC,UAAoB;AAC9B,MAAMC,SAAM,GAAGC,MAAsB;AAErC,MAAM,KAAK,GAAGL,KAAqB;AACnC,MAAMM,OAAI,GAAGP,IAAiB;AAC9B,MAAM,QAAQ,GAAGO,OAAI,CAAC,QAAQ;AAC9B,MAAM,GAAG,GAAGA,OAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;AAC9B,MAAM,OAAO,GAAGA,OAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;AAEtC,MAAM,WAAW,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,cAAc,KAAK;EAC5D,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAACA,OAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzE,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;EACvD,MAAM,kBAAkB,GAAG,CAAC,CAAC,IAAI;IAC/B,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC;IACfA,OAAI,CAAC,QAAQ;IACb,QAAQ;IACRA,OAAI,CAAC,MAAM;IACX,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;EAC7B,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,kBAAkB,CAAC,cAAc,CAAC,CAAC;CAC1E;AAED,MAAM,cAAc,GAAG,YAAY;EACjC,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAEF,SAAM,CAAC,MAAM,CAAC,CAAC;EACzD,MAAM,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5E,MAAM,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;EAC3C,OAAO,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;CAC/E;AACD,MAAM,cAAc,GAAG,MAAM;EAC3B,MAAM,MAAM,GAAG;IACb,CAAC,OAAO,EAAE,KAAK,CAAC;IAChB,CAAC,QAAQ,EAAE,MAAM,CAAC;IAClB,CAAC,QAAQ,EAAE,MAAM,CAAC;IAClB,CAAC,UAAU,EAAE,QAAQ,CAAC;IACtB,CAAC,QAAQ,EAAE,MAAM,CAAC;IAClB,CAAC,MAAM,EAAE,IAAI,CAAC;IACd,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;EACrB,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;EAC7B,MAAM,OAAO,GAAG,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK;EAC7D,OAAO,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;CAC3D;AAED,MAAM,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC;AAC5C,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,CAAC;AAChE,MAAM,eAAe,GAAG,MAAM;EAC5B,MAAM,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC;EAC7B,MAAM,OAAO,GAAG,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrC,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;CAClE;AACD,MAAM,iBAAiB,GAAG,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;AACrF,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,iBAAiB,CAAC;AAE/D,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;AACnD,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC;AAC3E,MAAM,WAAW,GAAG,CAAC,CAAC,QAAQ;AAC9B,MAAM,CAAC,OAAO,GAAG;EACf,OAAO,EAAE,cAAc,EAAE;EACzB,MAAM,EAAE,cAAc,EAAE;EACxB,QAAQ,EAAE,eAAe,EAAE;EAC3B,QAAQ;EACR,SAAS;EACT,UAAU;EACV,WAAW;;;;;AC9Db,MAAM,CAAC,GAAGL,UAAgB;AAI1B,MAAM,WAAW,GAAG;EAClB,IAAI,CAAC,MAAM;EACX,OAAO,CAAC,SAAS;EACjB,MAAM,CAAC,YAAY;EACnB,IAAI,CAAC,YAAY;CAClB;AAED,MAAM,OAAO,CAAC;EACZ,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE;IACxB,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK;IAC1B,GAAG,CAAC,MAAM,GAAG,QAAQ;IACrB,OAAO,GAAG;GACX;CACF;AACD,MAAM,MAAM,CAAC;EACX,OAAO,IAAI,CAAC,WAAW,EAAE;IACvB,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;GACjD;EACD,OAAO,UAAU,CAAC,WAAW,EAAE;IAC7B,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC;GACnD;EACD,OAAO,UAAU,CAAC,WAAW,EAAE;IAC7B,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC;GACjD;EACD,WAAW,GAAG,GAAG;IACf,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC7B,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC;GAC7B;EACD,OAAO,OAAO,CAAC,KAAK,EAAE;IACpB,OAAO,IAAI,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC;GAC7C;EACD,WAAW,CAAC,QAAQ,CAAC,GAAG,EAAE;IACxB,OAAO,CAAC,KAAK,CAAC,sDAAsD,CAAC;IACrE,IAAI,CAAC,MAAM,GAAG,QAAQ;IACtB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK;IACtB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK;IACvB,IAAI,CAAC,IAAI,GAAG,QAAQ;GACrB;EACD,IAAI,KAAK,GAAG;IACV,OAAO,CAAC,KAAK,CAAC,mDAAmD,CAAC;IAClE,OAAO,IAAI,CAAC,MAAM;GACnB;EACD,IAAI,KAAK,CAAC,GAAG,EAAE;IACb,OAAO,CAAC,KAAK,CAAC,mDAAmD,CAAC;IAClE,IAAI,CAAC,MAAM,GAAG,GAAG;GAClB;CACF;AAED,MAAM,CAAC,OAAO,GAAG;;;;ACpDjB,MAAM,CAAC,GAAGM,UAAgB;AAC1B,MAAM,CAAC,GAAGL,UAAoB;AAE9B,MAAMM,OAAI,GAAGP,IAAiB;AAE9B,MAAM,CAAC,GAAGO,OAAI,CAAC,CAAC;AAEhB,MAAM,QAAQ,CAAC;EACb,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE;IACzB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;IAChF,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;MACjB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;MAC3B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;KAC5B,MAAM;MACL,IAAI,CAAC,IAAI,GAAG,IAAI;MAChB,IAAI,CAAC,IAAI,GAAG,OAAO,EAAE,EAAE;KACxB;GACF;EACD,GAAG,CAAC,IAAI,EAAE;IACR,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;GAChC;EACD,IAAI,OAAO,GAAG;IACZ,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;GACtC;EACD,IAAI,MAAM,GAAG;IACX,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;GAChE;EACD,MAAM,CAAC,CAAC,EAAE;IACR,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;MAC5C,IAAI,CAAC,IAAI,GAAG,CAAC;;MAEb,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,OAAO,IAAI;GACZ;EAED,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvE,OAAO,IAAI,CAAC,IAAI,EAAE;IAChB,OAAO,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;QACzB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI;GACd;EACD,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;IAChC,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC;IAC9B,MAAM,MAAM,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC;IAChC,MAAM,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;GACzD;EACD,OAAO,SAAS,GAAG;IACjB,OAAO,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;GAC1B;EACD,OAAO,MAAM,CAAC,IAAI,EAAE;IAClB,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;GAC1B;CACF;AAED,MAAM,CAAC,OAAO,GAAG;;;;ACvDjB,MAAM,CAAC,GAAGC,UAAgB;AAC1B,MAAM,CAAC,GAAG,UAAoB;AAE9B,MAAMD,OAAI,GAAGH,IAAiB;AAE9B,MAAM,CAAC,GAAGG,OAAI,CAAC,CAAC;AAGhB,MAAM,IAAI,GAAGA,OAAI,CAAC,IAAI;AAGtB,MAAMF,SAAM,GAAGC,MAAsB;AACrC,MAAM,MAAM,GAAGL,MAAsB;AACrC,MAAM,QAAQ,GAAGD,QAAyB;AAO1C,MAAM,EAAE,GAAGK,SAAM,CAAC,EAAE;AACpB,MAAM,KAAK,GAAGA,SAAM,CAAC,IAAI,CAAC,IAAI;AAO9B,MAAM,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;AAEnC,MAAM,UAAU,GAAG,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAACE,OAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AAC1E,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;AAS7C,MAAM,QAAQ,GAAG,SAAS,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;AAC3E,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;AAEtC,SAAS,oBAAoB,CAAC,IAAI,EAAE;EAClC,MAAM,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,UAAU,GAAG,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;EAC5C,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;CAClD;AA2BD,SAAS,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE;EAClD,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC;EAC9C,MAAM,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3D,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;IACzC,OAAO,CAAC,CAAC,CAAC;IACV,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;EAC7C,MAAM,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;EAC5D,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;CAClD;AACD,SAAS,WAAW,CAAC,IAAI,EAAE;EACzB,MAAM,UAAU,GAAG,CAAC,EAAE,CAAC,CAACA,OAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;EACxD,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;EAC/E,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;EAE1C,MAAM,EAAE,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;EACrD,OAAO,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;CACnB;AACD,SAAS,SAAS,CAAC,IAAI,EAAE;EACvB,MAAM,UAAU,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;EAC5C,MAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC;IAC5B,WAAW,CAAC,WAAW;IACvB,WAAW,CAAC,UAAU;IACtB,WAAW,CAAC,QAAQ,CAAC,CAAC;EACxB,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;EAClE,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;EAEvC,MAAM,EAAE,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;EACrD,OAAO,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;CACnB;AAED,SAAS,YAAY,CAAC,IAAI,EAAE;EAC1B,MAAM,SAAS,GAAG;IAChB,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACjC,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACrC,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IAChC,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;IACtC,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;GAChC;EAED,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;IAChC,CAAC,CAAC,KAAK,GAAG,KAAK;IACf,CAAC,CAAC,IAAI,GAAG,IAAI;IACb,OAAO,CAAC;GACT;EACD,MAAM,cAAc,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;EACxF,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;EAC3D,MAAM,YAAY,GAAG,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;EAC9D,MAAM,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC;EACvC,OAAO,OAAO,CAAC,IAAI,CAAC;CACrB;AAED,SAAS,QAAQ,CAAC,IAAI,EAAE;EACtB,MAAM,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;EAC/E,MAAM,UAAU,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;EAEtF,MAAM,SAAS,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC;EAC/D,MAAM,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;EACvE,OAAO,UAAU,CAAC,IAAI,CAAC;CACxB;AAED,SAAS,aAAa,CAAC,IAAI,EAAE;EAC3B,OAAO,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC;CACxD;AAmBD,MAAM,CAAC,OAAO,GAAG;;;;AC3JjB,MAAM,CAAC,GAAG,UAAgB;AAC1B,MAAMA,OAAI,GAAGD,IAAiB;AAG9B,MAAM,KAAK,GAAGL,KAAqB;AACnC,MAAM,GAAG,GAAGM,OAAI,CAAC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAM,SAAS,GAAGP,MAAsB,CAAC,SAAS;AAElD,MAAM,MAAM,GAAGO,OAAI,CAAC,MAAM;AAC1B,MAAM,aAAa,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAACA,OAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC/D,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC;AACxC,MAAM,WAAW,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;AAEvC,MAAM,UAAU,GAAG;EACjB,CAAC,CAAC,KAAK;EACP,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC;CACrC;AACD,MAAM,UAAU,GAAG;EACjB,WAAW;EACX,CAAC,CAAC,MAAM;CACT;AAED,MAAM,SAAS,GAAG,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC;EAC7B,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;EACnB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;CACtB,CAAC;AACF,MAAM,QAAQ,GAAG,QAAQ,EAAE,CAAC,CAAC,IAAI;EAC/B,QAAQ;EACR,CAAC,CAAC,MAAM,CAAC;AACX,MAAM,UAAU,GAAG;EACjB,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC;EAChB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC;EACzB,MAAM;EACN,SAAS;EACT,CAAC,CAAC,GAAG;EACL,QAAQ;EACR,GAAG,CAAC,WAAW,CAAC,CAAC;AACnB,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC;AACxE,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAClE,MAAM,SAAS,GAAG;EAChBA,OAAI,CAAC,QAAQ;EACb,QAAQ;EACR,OAAO,CAAC;AACV,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC;AAC9B,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO;;;;AC7C9B,MAAM,CAAC,GAAGE,UAAgB;AAC1B,MAAM,CAAC,GAAGD,UAAoB;AAE9B,MAAM,GAAG,GAAGL,MAAsB;AAElC,MAAME,SAAM,GAAGD,MAAsB;AACrC,MAAMM,OAAI,GAAGJ,IAAoB;AACjC,MAAMK,WAAQ,GAAGV,QAAwB;AAEzC,MAAMM,OAAI,GAAGP,IAAiB;AAE9B,MAAM,GAAG,GAAGO,OAAI,CAAC,GAAG,CAAC,SAAS,CAAC;AAC/B,MAAM,OAAO,GAAGA,OAAI,CAAC,OAAO,CAAC,SAAS,CAAC;AACvC,MAAM,iBAAiB;EACrB,CAAC,CAAC,IAAI;IACJ,GAAG,CAAC,UAAU;IACd,OAAO,CAAC,WAAW,CAAC;IACpB,GAAG,CAAC,OAAO;IACX,OAAO,CAAC,YAAY,CAAC;IACrB,GAAG,CAAC,QAAQ;IACZ,OAAO,CAAC,UAAU,CAAC;IACnB,GAAG,CAAC,MAAM;IACV,OAAO,CAAC,YAAY,CAAC;IACrB,GAAG,CAAC,QAAQ;IACZ,OAAO,CAAC,aAAa,CAAC;IACtB,GAAG,CAAC,SAAS;IACb,OAAO,CAAC,eAAe,CAAC;IACxB,GAAG,CAAC,WAAW,CAAC;AACpB,MAAM,aAAa;EACjB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;IACZ,CAAC,CAAC,MAAM,CAACA,OAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,EAAE,CAAC;IAElF,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;IAEZ,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IACnBI,WAAQ,CAAC,IAAI;IACb,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5C,OAAO,CAAC,KAAK,CAAC;IAEd,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC;IACxB,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;MACjC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;MAC3B,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;MACnB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACxB,CAAC,CAAC,CAAC,CAAC,CAAC;GACP,CAAC;AAGJ,MAAM,CAAC,OAAO,GAAG;;;;AChDjB,MAAM,CAAC,GAAGH,UAAgB;AAC1B,MAAM,CAAC,GAAG,UAAoB;AAE9B,MAAMD,OAAI,GAAGH,IAAiB;AAE9B,MAAM,CAAC,GAAGG,OAAI,CAAC,CAAC;AAChB,MAAM,GAAG,GAAGA,OAAI,CAAC,GAAG,CAAC,MAAM,CAAC;AAC5B,MAAM,OAAO,GAAGA,OAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAEpC,MAAM,QAAQ,GAAGD,QAAyB;AAC1C,MAAM,MAAM,GAAGL,MAAsB;AACrC,MAAMI,SAAM,GAAGL,MAAsB;AAErC,MAAM,KAAK,GAAGK,SAAM,CAAC,IAAI,CAAC,IAAI;AAC9B,MAAM,EAAE,GAAGA,SAAM,CAAC,EAAE;AACpB,MAAM,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAEtD,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;AAC/B,MAAM,UAAU,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;AAChD,MAAM,MAAM,GAAG;EACb,KAAK,CAAC,CAAC;EACP,IAAI,CAAC,CAAC;EACN,IAAI,CAAC,CAAC;EACN,GAAG,CAAC,CAAC;EACL,KAAK,CAAC,CAAC;CACR;AACD,MAAM,OAAO,GAAG;EACd,IAAI,CAAC,CAAC;EACN,KAAK,CAAC,CAAC;EACP,MAAM,CAAC,CAAC,CAAC;EACT,KAAK,CAAC,GAAG;CACV;AACD,MAAM,MAAM,GAAG,KAAK,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAACE,OAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC9E,MAAM,UAAU,GAAG;EACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI;EACpB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC;EACxB,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC;EACzB,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,CAAC;CAC7B;AAED,MAAM,QAAQ,GAAG;EACf,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACf,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACf,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;CAChB;AACD,SAAS,QAAQ,CAAC,IAAI,EAAE;EACtB,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAACA,OAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;EAC5F,MAAM,kBAAkB,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAACA,OAAI,CAAC,IAAI,CAAC,IAAI,CAAC;EACnG,OAAO,CAAC,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC;CAC9C;AACD,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AACtC,SAAS,KAAK,GAAG;EACf,IAAI,CAAC,KAAK,GAAG,EAAE;EACf,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;EAC/C,IAAI,CAAC,QAAQ,GAAG,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;EAC9D,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE;EAC/B,IAAI,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;CAC9C;AACD,SAAS,QAAQ,CAAC,IAAI,EAAE;EACtB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC;EACzD,IAAI,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE;EACjC,IAAI,KAAK,GAAG,IAAI,KAAK,EAAE;EACvB,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK;EACxB,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;EAC9F,IAAI,CAAC,GAAG,CAAC;EACT,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE;IACnB,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACf,IAAI,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClC,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC;IACzC,OAAO,QAAQ;MACb,KAAK,OAAO,CAAC,KAAK;QAChB,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QACtB,KAAK;MACP,KAAK,OAAO,CAAC,MAAM;QACjB,KAAK,CAAC,GAAG,EAAE;QACX,KAAK;KACR;IACD,KAAK,GAAG,SAAS;IACjB,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC,EAAE;GACJ;EACD,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;CACvC;AAED,MAAM,CAAC,OAAO,GAAG;;;;ACtFjB,MAAM,CAAC,GAAG,UAAgB;AAC1B,MAAM,CAAC,GAAGD,UAAoB;AAE9B,MAAMC,OAAI,GAAGN,IAAiB;AAE9B,MAAM,CAAC,GAAGM,OAAI,CAAC,CAAC;AAChB,MAAM,GAAG,GAAGA,OAAI,CAAC,GAAG,CAAC,MAAM,CAAC;AAC5B,MAAM,OAAO,GAAGA,OAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AAEpC,MAAM,QAAQ,GAAGP,QAAyB;AAE1C,MAAM,KAAK,CAAC;EACV,OAAO,SAAS,CAAC,GAAG,EAAE;IACpB,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAACO,OAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC3E;EACD,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;IACjB,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC;IAC/B,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;GACtC;EACD,WAAW,WAAW,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;EACnF,WAAW,IAAI,EAAE;IACf,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;EACjD,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;EAClD,WAAW,UAAU,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EACxE,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;IACxC,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC;IACjC,MAAM,IAAI,GAAG,KAAK;IAClB,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC7C,MAAM,OAAO,GAAG,CAAC,OAAO,CAAC;IACzB,MAAM,WAAW,GAAG,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF,MAAM,UAAU,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IAClF,MAAM,WAAW,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC;IAC5D,MAAM,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;IAChC,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;MACzB,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACzD,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;MAC1C,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;KAC9D,MAAM;MACL,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACvD,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;KAC1B;GACF;CACF;AAED,MAAM,CAAC,OAAO,GAAG;;;;AC7CjB,MAAM,CAAC,GAAG,UAAgB;AAE1B,MAAM,QAAQ,GAAGD,QAAyB;AAC1C,MAAM,MAAM,GAAGL,MAAsB;AACrC,MAAMM,OAAI,GAAGP,IAAiB;AAC9B,MAAM,CAAC,GAAGO,OAAI,CAAC,CAAC;AAEhB,SAAS,gBAAgB,CAAC,GAAG,EAAE;EAC7B,IAAI,CAAC,OAAO,GAAG,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;EAC9C,IAAI,CAAC,IAAI,GAAG,kBAAkB;CAC/B;AAED,SAAS,WAAW,CAAC,GAAG,EAAE;EACxB,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC;IACrB,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC;IACrB,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAACA,OAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACxC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;IACzB,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC;IAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,IAAI,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;GACzC,CAAC;EACF,OAAO,OAAO,CAAC,GAAG,CAAC;CACpB;AAED,SAAS,OAAO,CAAC,IAAI,EAAE;EACrB,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;EAC3D,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;CAC7D;AAED,SAAS,SAAS,CAAC,IAAI,EAAE;EACvB,OAAO,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;MACzB,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;MAC5D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;CAC3B;AAED,SAAS,GAAG,CAAC,IAAI,EAAE;EACjB,OAAO,WAAW,CAAC,IAAI,CAAC;CACzB;AAED,MAAM,CAAC,OAAO,GAAG;;;;ACtCjB,MAAM,CAAC,GAAGE,UAAgB;AAG1B,MAAM,OAAO,GAAGD,gBAAiC;AACjD,MAAM,OAAO,GAAGL,IAAoB;AACpC,MAAMS,WAAQ,GAAGR,QAAwB;AAEzC,MAAMG,OAAI,GAAGD,IAAiB;AAC9B,MAAM,CAAC,GAAGC,OAAI,CAAC,CAAC;AAChB,MAAM,GAAG,GAAGA,OAAI,CAAC,GAAG,CAAC,OAAO,CAAC;AAE7B,MAAM,KAAK,GAAGN,KAAqB;AACnC,MAAM,GAAG,GAAGD,GAAmB;AAE/B,SAASa,MAAG,CAAC,IAAI,EAAE;EACjB,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAACD,WAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC;CACpF;AAED,MAAM,WAAW,GAAG,oCAAoC;AAIxD,GAAG,CAAC,SAAS,CAAC,CAAC,WAAW,CAAC;AAG3B,IAAI,IAAI,GAAGC,MAAG,CAAC,WAAW,CAAC;AAC3B,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;AACjB,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC;AAEhB,MAAM,CAAC,OAAO,GAAGA;;;"}