{"version":3,"file":null,"sources":["../app/lang/syntax.js","../app/model/token.js","../app/model/ramda-piped.js","../app/pipefy.js","../app/util.js","../app/core/fabric.js","../app/core/splitter.js","../app/model/error.js","../app/core/string-preprocess.js","../app/model/head-list.js","../app/model/lexeme.js","../app/lang/tooling.js","../app/print.js","../app/model/double-linked.js","../app/core/tree-error.js","../app/core/tree.js","../app/model/stack.js","../app/core/convolve.js","../app/model/outfall.js","../app/core/context.js","../app/core/say.js","../app/index.js"],"sourcesContent":["const op = {\r\n  doubledots:'::',\r\n  comma:',',\r\n  dash:'_',\r\n  arrow:'->',\r\n  doublearrow:'=>',\r\n  middlepipe:'<|>',\r\n  backpipe:'<|',\r\n  forwardpipe: '|>',\r\n  equals:'==',\r\n  plus:'+',\r\n  minus:'-',\r\n  map:'[^]',\r\n  define:':='\r\n}\r\nconst types = {\r\n  type:'type',\r\n  R:'R',\r\n  string:'string',\r\n  number:'number',\r\n  op:'operator',\r\n  any:'any',\r\n  context:'context',\r\n  lex:'lexeme',\r\n  F:'contextF',\r\n  arg:'argument'\r\n}\r\nconst jstypes = [\r\n  ['Array', Array],\r\n  ['Number', Number],\r\n  ['String', String],\r\n  ['Function', Function],\r\n  ['Object', Object],\r\n  ['Null', null],\r\n  ['RegExp', RegExp]]\r\nconst quotes = ['\"',\"'\",'`']\r\nconst categories = {\r\n  piped:[types.R,types.context,types.lex],\r\n  inserted:[types.number,types.string,types.type,types.any],\r\n  control:[types.op]\r\n}\r\nconst lexemeTypes = {\r\n  pipe:'Pipe',\r\n  context:'Context',\r\n  atomic:'AtomicFunc',\r\n  expr:'Expression',\r\n  arg:'Argument'\r\n}\r\nmodule.exports = {op,types,quotes,categories,jstypes,lexemeTypes}","const R = require('ramda')\r\nconst types = require('../lang/syntax').types\r\n\r\nconst TokenFabric = R.curry((category,obj)=>{\r\n  return {\r\n    type:category,\r\n    value:obj\r\n  }\r\n})\r\n\r\nmodule.exports = R.map(e=>TokenFabric(types[e]),{\r\n  Type      :'type',\r\n  R         :'R',\r\n  String    :'string',\r\n  Number    :'number',\r\n  Operator  :'op',\r\n  Any       :'any',\r\n  Context   :'context',\r\n  Arg       :'arg'\r\n})","const R = require('ramda')\r\n\r\nconst def = (func,obj)=>prop=>\r\n  Object.defineProperty(obj,prop[0],{\r\n    get:function(){\r\n      func(prop[1])\r\n      return obj}})\r\nconst appender = _store=>val=>_store.push(val)\r\nconst setter = (store,ins,dict)=> R.pipe(R.toPairs,R.forEach(def(appender(store),ins)))(dict)\r\nfunction polymorph(store) {\r\n  // Doesnt understand wtf is going on here, but seem like this check never fall\r\n\r\n  // const inputCheck = (argsArr,_store)=>\r\n  //   !R.isEmpty(argsArr)\r\n  //   &&!R.is(Function,argsArr[0])&&\r\n  //   R.none(R.isNil,argsArr)\r\n  //   &&!R.isEmpty(_store)\r\n  return function ins(...val) {\r\n    // if (inputCheck(val,store)) {\r\n    store.push(store.pop()(...val))\r\n    // }\r\n    return ins\r\n  }\r\n}\r\nfunction storage(dict) {\r\n  var store = []\r\n  var ins = polymorph(store)\r\n  Object.defineProperty(ins,'store',{get:function(){return store}})\r\n  Object.defineProperty(ins,'run',{get: function() {return R.pipe(...store)}})\r\n  setter(store,ins,dict)\r\n  return ins\r\n}\r\nconst RP = {}\r\nObject.defineProperty(RP,'do',{get:function(){return storage(R)}})\r\n\r\n\r\n\r\nmodule.exports = ()=>RP.do","const R = require('ramda')\r\n\r\nconst red = func => R.reduce(func,[])\r\nconst reducer = red(logic)\r\nconst ifArr = R.pipe(\r\n  R.flatten,\r\n  reducer,\r\n  R.flip(R.concat)\r\n)\r\nfunction logic(acc,val) {\r\n  if (R.is(Array)(val))\r\n    return ifArr(val)(acc)\r\n  else\r\n    return R.append(val,acc)\r\n}\r\nfunction P(...data) {\r\n  let actionList = reducer(data)\r\n  return R.pipe(...actionList)\r\n}\r\n\r\nmodule.exports = P","const R = require('ramda')\r\nconst debug = require('debug')\r\n\r\nconst RP = require('./model/ramda-piped')\r\n\r\nconst pipefy = require('./pipefy')\r\nconst P = pipefy\r\n\r\nconst isof = {\r\n  String: R.is(String),\r\n  Func:   R.is(Function),\r\n  Array:  R.is(Array),\r\n  Nil:    R.isNil,\r\n  Real:   e=>!R.isNil(e),\r\n  Empty:  R.isEmpty,\r\n  Full:   e=>!R.isEmpty(e)\r\n}\r\n\r\nconst tagvalue = (tag,mess)=>isof.Nil(mess) ? tag : [tag,mess].join(':  ')\r\nconst log = tag=>mess=>debug(tagvalue(tag,mess))\r\nconst pipelog = tag=>mess=>R.tap(log(tag)(mess))\r\n\r\nconst arrayify = R.pipe(R.defaultTo([]),R.unless(isof.Array,R.of))\r\n\r\n// const P = (...pipes)=>R.apply(R.pipe,R.filter(isof.Func,pipes))\r\n\r\n\r\nconst isContainOrEq = P(arrayify,R.flip(R.contains))\r\n\r\n\r\nconst {create, env} = require('sanctuary')\r\nconst checkTypes = false//process.env.NODE_ENV !== 'production';\r\nconst S = create({checkTypes: checkTypes, env: env})\r\n\r\nconst prop = R.map(R.prop,{\r\n  type: 'type',\r\n  val:  'value',\r\n  head: 'head',\r\n  tail: 'tail',\r\n  data: 'data'\r\n})\r\n\r\nconst isString = isof.String\r\n\r\nmodule.exports = {\r\n  pipelog,log,isString,arrayify,P,isof,isContainOrEq,prop,RP,S\r\n}","const R = require('ramda')\r\nconst syntax = require('../lang/syntax')\r\n\r\n\r\nconst Token = require('../model/token')\r\nconst util = require('../util')\r\n\r\nconst S = util.S\r\nconst P = util.P\r\n\r\nconst isString = util.isString\r\n// const log = util.log('fabric')\r\n// const pipelog = util.pipelog('fabric')\r\n\r\nfunction TokenFabric(tokenType, condition, transformation) {\r\n  const onCondition = P(util.arrayify, R.allPass, S.either(R.__, R.F))\r\n  const appendArray = R.flip(R.concat)\r\n  const addSteps = appendArray([tokenType, S.Right])\r\n  const transformUntouched = P(\r\n    util.arrayify,\r\n    addSteps,\r\n    P,\r\n    e=>S.either(e, R.identity))\r\n  return R.when(onCondition(condition), transformUntouched(transformation))\r\n}\r\n\r\nconst quoteProcessor = function () {\r\n  const isQuote = R.anyPass(R.map(R.equals, syntax.quotes))\r\n  const isQuoted = R.allPass([P(R.head, isQuote), P(R.last, isQuote)])\r\n  const removeQuotes = P(R.init, R.tail)\r\n  return TokenFabric(Token.String, [isString, isQuoted], [R.trim, removeQuotes])\r\n}\r\nconst typesProcessor = () => {\r\n  const types = new Map(syntax.jstypes)\r\n  const isInMap = obj => isString(obj) ? types.has(obj) : false\r\n  return TokenFabric(Token.Type, isInMap, e => types.get(e))\r\n}\r\n\r\nconst isNumber = TokenFabric(Token.Number, isFinite, parseFloat)\r\nconst vendorProcessor = () => {\r\n  const isFunc = R.is(Function)\r\n  const isRamda = obj => isFunc(R[obj])\r\n  return TokenFabric(Token.R, [isString, isRamda], R.prop(R.__, R))\r\n}\r\nconst contextValidation = str => P(R.match(/\\D\\w+/), R.head, R.equals(str))(str)\r\nconst isContext = TokenFabric(Token.Context, contextValidation)\r\nconst argValidation = R.both(P(R.head,R.equals('@')),P(R.tail,contextValidation))\r\nconst isArg = TokenFabric(Token.Arg, argValidation, R.tail)\r\n\r\nconst preprocess = S.lift(R.when(isString, R.trim))\r\nconst postprocess = R.identity\r\n// R.tap(e=>{\r\n//   if (e.isLeft)\r\n//     throw Err.Throw.Token(e.value)\r\n// })\r\nmodule.exports = {\r\n  isQuote: quoteProcessor(),\r\n  isType: typesProcessor(),\r\n  isVendor: vendorProcessor(),\r\n  isNumber,\r\n  isContext,\r\n  isArg,\r\n  preprocess,\r\n  postprocess\r\n}","const R = require('ramda')\r\nconst util = require('../util')\r\nconst P = util.P\r\n\r\nconst Token = require('../model/token')\r\nconst log = util.pipelog('splitter')\r\nconst operators = R.values(require('../lang/syntax').op) //TODO rewrite op list using\r\n\r\nconst stringMorpher = morph=>R.map(R.when(util.isof.String,morph))\r\nconst stringTrim = stringMorpher(R.trim)\r\nconst rejectEmpty = R.reject(R.isEmpty)\r\n\r\nconst opersFuncs = [\r\n  R.split,\r\n  P(Token.Operator,R.intersperse)\r\n]\r\n\r\nconst constFuncs = [\r\n  rejectEmpty,\r\n  R.unnest\r\n]\r\n\r\nconst splitCond = symb=>R.cond([\r\n  [util.isof.String,symb],\r\n  [R.T,log('uncaught')]\r\n])\r\nconst unnester = symbPipe=>P(\r\n  symbPipe,\r\n  R.unnest)\r\nconst splitsPipe = [\r\n  R.of,\r\n  R.ap(opersFuncs),\r\n  R.concat(R.__,constFuncs),\r\n  P,\r\n  splitCond,\r\n  R.map,\r\n  unnester,\r\n  log('splitPipe')]\r\nconst splitter = P(P,R.map(R.__,operators),P)(splitsPipe)\r\nconst cleaner = P(R.unnest,stringTrim,rejectEmpty,log('end'))\r\nconst execFuncs = [\r\n  util.arrayify,\r\n  splitter,\r\n  cleaner]\r\nconst exec = P(execFuncs)\r\nmodule.exports = {exec,cleaner}","const R = require('ramda')\r\nconst util = require('../util')\r\nconst isof = util.isof\r\nconst P = util.P\r\n\r\nfunction CustomError(message,data) {\r\n  this.name = \"CustomError\"\r\n  // const objString = {\r\n  //   onReal:'Error with object',\r\n  //   onNil:'Error with undefined object'\r\n  // }\r\n  // let objectInfo = isof.Real(data)\r\n  //   ? objString.onReal\r\n  //   : objString.onNil\r\n  this.message = join.msg([message,data])\r\n\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, this.constructor)\r\n  } else {\r\n    this.stack = (new Error()).stack\r\n  }\r\n}\r\n\r\nCustomError.prototype = Object.create(Error.prototype)\r\nCustomError.prototype.constructor = CustomError\r\n\r\nconst join = {\r\n  msg:R.join(': '),\r\n  newline:R.join('\\n'),\r\n  space:R.join(' '),\r\n  clear:R.join(''),\r\n  comma:R.join(', ')\r\n}\r\nconst keyValJoint = P(\r\n  R.map(P(\r\n    R.toPairs,\r\n    R.map(join.msg),\r\n    join.comma,\r\n    e=>join.space(['{',e,'}']))),\r\n  join.newline)\r\nconst countsMessage = message=>data=>R.ifElse(e=>e.length>1,()=>message+'s',()=>message)(data)\r\n\r\nclass TokenError extends CustomError {\r\n  static get message() {\r\n    return countsMessage(`unknown token`)\r\n  }\r\n  constructor(data) {\r\n    super(TokenError.message(data), (data))\r\n    this.name = \"TokenError\"\r\n  }\r\n}\r\nclass ArgumentsTypeError extends CustomError {\r\n  static get message() {\r\n    return countsMessage(`call non-function argument`)\r\n  }\r\n  constructor(data) {\r\n    super(ArgumentsTypeError.message(data), keyValJoint(data))\r\n    this.name = \"ArgumentsTypeError\"\r\n  }\r\n}\r\nclass LexicError extends CustomError {\r\n  static get message() {\r\n    return P(\r\n      R.converge(R.of,[R.pluck('error'),R.pluck('data')]),\r\n      R.map(join.comma))\r\n  }\r\n  constructor(data) {\r\n    super(LexicError.message(data), keyValJoint(R.pluck('data',data)))\r\n    this.name = \"LexicError\"\r\n  }\r\n}\r\nfunction errorCheck(Err) {\r\n  return function(data) {\r\n    let failed = util.S.lefts(data)\r\n    if (!R.isEmpty(failed))\r\n      throw new Err(failed)\r\n  }\r\n}\r\nCustomError.Throw = {\r\n  Token:errorCheck(TokenError),\r\n  Args:e=>{throw new ArgumentsTypeError(e)},\r\n  Lexic:errorCheck(LexicError)\r\n}\r\n\r\nmodule.exports = CustomError","const R = require('ramda')\r\n\r\nconst fab = require('./fabric')\r\n\r\nconst splitter = require('./splitter')\r\n\r\nconst util = require('../util')\r\nconst P = util.P\r\nconst S = util.S\r\nconst Err = require('../model/error')\r\n\r\nconst pipelog = util.pipelog('preproc')\r\nconst singleWordParsing =\r\n  P(\r\n    fab.preprocess,\r\n    pipelog('->isQuote'),\r\n    fab.isQuote,\r\n    pipelog('->isNumber'),\r\n    fab.isNumber,\r\n    pipelog('->isType'),\r\n    fab.isType,\r\n    pipelog('->isVendor'),\r\n    fab.isVendor,\r\n    pipelog('->isArg'),\r\n    fab.isArg,\r\n    pipelog('->isContext'),\r\n    fab.isContext,\r\n    pipelog('->postprocess'),\r\n    fab.postprocess)\r\nfunction splitKeywords(data) {\r\n  const err = R.unless(util.isString, () => { throw new Error('`keywords` should be String'); })\r\n  const beforeSplit = P(\r\n    err,\r\n    R.split(' '),\r\n    R.reject(R.isEmpty))\r\n  const sSort = R.map(R.ifElse(R.is(Object),S.Right,S.Left))\r\n  const _drops = (a,b)=>R.allPass([\r\n    R.propEq('type','operator'),\r\n    R.propEq('obj',','),\r\n    R.eqProps('obj',R.__,b)\r\n  ])(a)\r\n  const drops = R.dropRepeatsWith(_drops)\r\n  let un = P(\r\n    beforeSplit,\r\n    splitter.exec,\r\n    sSort,\r\n    pipelog('тэг'),\r\n\r\n    R.map(singleWordParsing),\r\n    drops\r\n  )\r\n  let splitted = un(data)\r\n  Err.Throw.Token(splitted)\r\n  return splitted\r\n}\r\n\r\n\r\nmodule.exports = splitKeywords","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\nconst P = util.P\r\nconst isof = util.isof\r\n\r\nclass HeadList {\r\n  constructor(rawData) {\r\n    const list = util.arrayify(rawData)\r\n    this.head = R.head(list) || {}\r\n    this.tail = R.tail(list)\r\n  }\r\n  get toArray() {\r\n    return R.prepend(this.head,this.tail)\r\n  }\r\n  *[Symbol.iterator]() {\r\n    yield this.head\r\n    for (let e of this.tail)\r\n      yield e\r\n  }\r\n  get length() {\r\n    return R.converge(R.add,[\r\n      R.pathOr(0,['tail','length']),\r\n      P(R.prop('head'),R.isNil,e=>e ? 0 : 1)])\r\n  }\r\n  append(e) {\r\n    if (HeadList.isEmpty(this))\r\n      this.head = e\r\n    else\r\n      this.tail.push(e)\r\n    return this\r\n  }\r\n  static create(e) {\r\n    return new HeadList(e)\r\n  }\r\n  static get prepend() {\r\n    return R.curry((val,list)=>{\r\n      list.tail = R.prepend(list.head, list.tail)\r\n      list.head = val\r\n      return list\r\n    })\r\n  }\r\n  static cyclic(func) {\r\n    return function(list) {\r\n      for(let e of list)\r\n        e = P(R.when(\r\n          HeadList.isList,\r\n          HeadList.cyclic(func)),func)(e)\r\n      return list\r\n    }\r\n  }\r\n  static isEmpty(list) {\r\n    return !HeadList.hasTail(list)&&R.isEmpty(list.head)\r\n  }\r\n  static get hasTail() {\r\n    return R.both(R.has('tail'),P(R.prop('tail'),isof.Full))\r\n  }\r\n  static last(list) {\r\n    return HeadList.hasTail(list)\r\n      ? R.last(list.tail)\r\n      : list.head\r\n  }\r\n  static lastR(list,isStrict=false) {\r\n    const _hasTail = R.has('tail')\r\n    const notHas = P(_hasTail,R.not)\r\n    const cond = R.either(notHas,P(HeadList.last,notHas))\r\n    return R.until(isStrict?cond:notHas,HeadList.last)(list)\r\n  }\r\n  static emptyList() {\r\n    return new HeadList()\r\n  }\r\n  static isList(list) {\r\n    return R.has('head',list)\r\n  }\r\n}\r\n\r\nmodule.exports = HeadList","const R = require('ramda')\r\n\r\nconst lexemeTypes = require('../lang/syntax').lexemeTypes\r\nconst HeadList = require('./head-list')\r\n\r\nclass ILexeme {\r\n  constructor(typename,obj) {\r\n    obj.index = obj.head.index\r\n    obj.lexeme = typename\r\n    return obj\r\n  }\r\n}\r\nclass Lexeme {\r\n  static Pipe(tokensList) {\r\n    // const list = HeadList.create(tokensList)\r\n    return new ILexeme(lexemeTypes.pipe,tokensList)\r\n  }\r\n  static AtomicFunc(tokensHList) {\r\n    return new ILexeme(lexemeTypes.atomic,tokensHList)\r\n  }\r\n  static Expression(tokensHList) {\r\n    return new ILexeme(lexemeTypes.expr,tokensHList)\r\n  }\r\n  static Argument(tokensHList) {\r\n    return new ILexeme(lexemeTypes.arg,tokensHList)\r\n  }\r\n  static get its() {\r\n    const eq = R.propEq('lexeme')\r\n    return R.map(eq,lexemeTypes)\r\n  }\r\n  static Context(token) {\r\n    return new Lexeme(lexemeTypes.context,token)\r\n  }\r\n}\r\n\r\nmodule.exports = Lexeme","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst P = util.P\r\n\r\nconst syntax = require('./syntax')\r\nconst types = syntax.types\r\nconst op = syntax.op\r\n\r\nconst checkToken = type=>val=>R.whereEq({type:type,value:val})\r\nconst checkOper = checkToken(types.op)\r\nconst checkType = R.propEq('type')\r\n\r\nconst def = (func,obj)=>prop=>\r\n  Object.defineProperty(obj,prop[0],{\r\n    get:function(){\r\n      func(prop[1])\r\n      return obj}})\r\nfunction polymorph(store) {\r\n  return function ins(val) {\r\n    return R.ifElse(R.either(R.isNil,()=>R.isEmpty(store)),()=>ins, R.anyPass(store))(val)\r\n  }\r\n}\r\nconst appender = store=>val=>store.push(val)\r\nconst setter = (store,ins,dict)=>P(\r\n  R.toPairs,\r\n  R.forEach(\r\n    def(appender(store),ins)))(dict)\r\nfunction storage(dict) {\r\n  var store = []\r\n  var ins = polymorph(store)\r\n  Object.defineProperty(ins,'store',{get:function(){return store}})\r\n  setter(store,ins,dict)\r\n  return ins\r\n}\r\n\r\nconst eq = {\r\n  op:       R.map( checkOper )(op),\r\n  type:     R.map( checkType )(types),\r\n  typedVal: R.map( checkToken )(types)\r\n}\r\n\r\nconst equals = {}\r\nObject.defineProperty(equals,'op',{get:function(){return storage(eq.op)}})\r\nObject.defineProperty(equals,'type',{get:function(){return storage(eq.type)}})\r\nObject.defineProperty(equals,'typedVal',{get:function(){return storage(eq.typedVal)}})\r\n\r\n\r\n\r\nmodule.exports = {eq,equals}","const R = require('ramda')\r\n\r\nconst util = require('./util')\r\nconst S = util.S\r\n\r\nconst P = util.P\r\nconst log = util.log('tree')\r\n// const pipelog = util.pipelog('tree')\r\n\r\nconst HeadList = require('./model/head-list')\r\n\r\nclass Print {\r\n  static _indexTag(tag) {\r\n    return (e,separ=' ')=>P(util.arrayify,R.prepend(tag),R.join(separ),log)(e)\r\n  }\r\n  static arr(tag,arr){\r\n    let iTag = Print._indexTag(tag)\r\n    return arr.forEach((e,i)=>iTag(i)(e))\r\n  }\r\n  static get funcReplace() {return R.when(P(R.last,R.is(Function)),e=>[e[0],'FUNC'])}\r\n  static get pair(){\r\n    return P(R.toPairs,R.map(Print.funcReplace()))}\r\n  static to(func) {return P(S.maybeToNullable,func)}\r\n  // static get typeOrOper() {return R.ifElse(isOperator,prop.val,prop.type)}\r\n  static headList(tag,data,index=0,level=0) {\r\n    const iTag = Print._indexTag(tag)\r\n    const padd = '   '\r\n    const joinPadd = P(R.repeat(padd),R.join(''))\r\n    const objKeys = ['value']\r\n    const keyValPrint = padding=>e=>iTag(['  ',joinPadd(level),padding,e[0]],'')(e[1])\r\n    const tokenPrint = keys=>P(R.props(keys),R.zip(keys),R.forEach(keyValPrint(padd)))\r\n    const isRealIndex = i=>i===-1?'#  ':i+1+((i+1)>=10?' ':'  ')\r\n    const nextLevel = R.add(2,level)\r\n    if (HeadList.isList(data)) {\r\n      keyValPrint(isRealIndex(index))([data.lexeme,data.index])\r\n      Print.headList(tag,data.head,-1,nextLevel)\r\n      if (HeadList.hasTail(data))\r\n        data.tail.forEach((e,i)=>Print.headList(tag,e,i,nextLevel))\r\n    } else {\r\n      keyValPrint(isRealIndex(index))([data.type,data.index])\r\n      tokenPrint(objKeys)(data)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Print","const R = require('ramda')\r\n\r\nconst nil = R.isNil\r\n\r\nclass DoubleLinked {\r\n  constructor(index=0,past=null,next=null) {\r\n    this.past = past\r\n    this.next = next\r\n    this.index = index\r\n    this.lens = R.lensIndex(index)\r\n  }\r\n  get getter() {\r\n    return R.view(this.lens)\r\n  }\r\n  static getter(e,data) {\r\n    return R.view(e.lens,data)\r\n  }\r\n  setNext(next) {\r\n    this.next = next\r\n  }\r\n  get isFirst() {\r\n    return nil(this.past)\r\n  }\r\n  get isLast() {\r\n    return nil(this.next)\r\n  }\r\n  static first() {\r\n    return new DoubleLinked()\r\n  }\r\n}\r\nclass DLinkedList {\r\n  constructor(arr) {\r\n    this.source = arr\r\n    this.first = null\r\n    this.last = null\r\n    this.length = 0\r\n  }\r\n  inc() {\r\n    return this.length++\r\n  }\r\n  dec() {\r\n    return this.length--\r\n  }\r\n  // getter(data) {\r\n  //   return function(e) {\r\n  //     return R.view(e.lens,data)\r\n  //   }\r\n  // }\r\n  static create(arr) {\r\n    let list = new DLinkedList(arr)\r\n    const length = R.length(arr)\r\n    let i=0\r\n    while (i<length) {\r\n      list.inc()\r\n      if (i===0) {\r\n        list.first = DoubleLinked.first()\r\n        list.last = list.first\r\n      } else {\r\n        let e = new DoubleLinked(i,list.last)\r\n        list.last.setNext(e)\r\n        list.last = e\r\n      }\r\n      i++\r\n    }\r\n    return list\r\n  }\r\n  static remove(list,e) {\r\n    if (e.isFirst&&e.isLast) {\r\n      list.first = null\r\n      list.last = null\r\n    } else if (!e.isFirst&&!e.isLast) {\r\n      e.past.next = e.next\r\n      e.next.past = e.past\r\n    } else if (e.isFirst) {\r\n      list.first = e.next\r\n      list.first.past = null\r\n    } else if(e.isLast) {\r\n      list.last = e.past\r\n      list.last.next = null\r\n    }\r\n    list.dec()\r\n  }\r\n  *[Symbol.iterator]() {\r\n    yield this.first\r\n    let next = this.first.next\r\n    while(!nil(next)) {\r\n      yield next\r\n      next = next.next\r\n    }\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = DLinkedList","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\nconst P = util.P\r\n\r\nconst tool = require('../lang/tooling')\r\nconst eq = tool.equals\r\n\r\nconst DlinkList = require('../model/double-linked')\r\nconst Err = require('../model/error')\r\n\r\nconst chain = func=>e=>e.chain(func)\r\nfunction testing(rejectFunc) {\r\n  const testPack = tests => P(R.juxt(util.arrayify(tests)),R.all(R.equals(true)))\r\n  const curryTestPack = tests=>e=>data=>testPack(tests)(e,data)\r\n  const over = (_list,morpher)=>node=>R.over(node.lens,morpher(_list,node))\r\n  const onCatch = (tester,overrider)=>node=>R.when(tester(node),overrider(node))\r\n  const checkNode = tester=>morpher=>_list=>{\r\n    const overrider = over(_list,morpher)\r\n    const catcher = onCatch(tester,overrider)\r\n    return (_data,node)=>catcher(node)(_data)\r\n  }\r\n  const testsPipe = P(curryTestPack,checkNode)\r\n  const recompose = (rejectFunc,testlist)=>P(rejectFunc,testsPipe(testlist))\r\n  return (testName,testlist) => recompose(rejectFunc,testlist)(testName)\r\n}\r\n\r\nfunction prepareValidation(testKit) {\r\n  const leftErrorGen = errorText=>o=>S.Left({error:errorText,data:o})\r\n  const errorGen = rejectFunc=>P(leftErrorGen,chain,rejectFunc)\r\n  const changeRejected = (onError)=>(_list,listNode)=>e=>{\r\n    DlinkList.remove(_list,listNode)\r\n    return onError(e)\r\n  }\r\n  const testingFactory = P(errorGen,testing)(changeRejected)\r\n  const testingRun = P(R.toPairs,R.map(e=>testingFactory(...e)),P)\r\n  return testingRun(testKit)\r\n}\r\nfunction iterduce(testFunc) {\r\n  return function(data) {\r\n    let list = DlinkList.create(data)\r\n    return errorSummary(R.reduce(testFunc(list),data,list))\r\n  }\r\n}\r\nfunction errorSummary(data) {\r\n  Err.Throw.Lexic(data)\r\n  return S.rights(data)\r\n}\r\n\r\nconst isInsertCatTest = (e,_data)=>e.getter(_data).chain(eq.type.number.string.type.any.arg)\r\nconst siblingTest = (e,_data)=>e.isFirst\r\n\r\nconst testKit = {\r\n  siblingFilter:[isInsertCatTest,siblingTest]\r\n}\r\n\r\nlet project = prepareValidation(testKit)\r\n\r\nmodule.exports = iterduce(project)","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\n\r\nconst P = util.P\r\nconst RP = util.RP\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\nconst prop = util.prop\r\n\r\nconst Lexeme = require('../model/lexeme')\r\nconst HeadList = require('../model/head-list')\r\n\r\nconst types = require('../lang/syntax').types\r\nconst tool = require('../lang/tooling')\r\nconst eq = tool.equals\r\nconst Print = require('../print')\r\n\r\nconst findErrors = require('./tree-error')\r\n\r\nconst leftRight = o=>o.isRight?'R':'L'\r\nconst tapArr = tag=> R.tap(e=>e.map((o,i)=>pipelog(R.join(' ')([tag,i,leftRight(o)]))(o.value)))\r\n// const example = \"tokens :: Array prop 'type' indexOf _ 'tokens' equals -1 not\"\r\n// const exampleNoDef = \"prop 'type' indexOf _ 'tokens' equals -1 not\"\r\n//const onChecking = P(  R.prepend(  R.take(2) , R.equals('|>') ) , R.apply(R.ifElse) )\r\n//const __tranducer = P(R.ifElse(P(R.prop('value'),R.propEq('type','R')),P(R.prop('value'),R.of,R.append)),R.map)\r\n// const exampleTrans = \"ifElse <| prop 'value' propEq 'type' 'R' <|> prop 'value' of append |> map\" // _ identity\r\n\r\n// const isTokenCat = tokenArray=>P(prop.type,util.isContainOrEq(tokenArray))\r\n\r\nconst eitherToMaybe = R.map(S.eitherToMaybe)\r\n\r\nfunction indexation(data) {\r\n  const indexPipe = (e,i)=>S.lift(R.assoc('index',i))(e)\r\n  const _indexation = list=>list.map(indexPipe)\r\n  return _indexation(data)\r\n}\r\n\r\nconst valEq = R.propEq('value')\r\nconst check =func=> e=>R.both(S.isRight,valEq(true))(S.lift(func,e))\r\nfunction stageHeader(data) {\r\n  const eiSplitOn = func=>P(R.splitWhen(check(func)), R.adjust(R.tail,1))\r\n\r\n  const split = {\r\n    context:eiSplitOn(eq.op.doubledots),\r\n    define:eiSplitOn(eq.op.define)\r\n  }\r\n  const writeField = (field,obj)=>res=>{\r\n    if (R.isEmpty(res[1])) {\r\n      obj[field] = false\r\n      return res[0]\r\n    } else {\r\n      obj[field] = S.rights(res[0])\r\n      return res[1]\r\n    }\r\n  }\r\n  let props = {}\r\n  let res = P(split.define,writeField('define',props),split.context,writeField('context',props))\r\n  props.data = res(data)\r\n  return props\r\n}\r\n\r\nfunction headSplitter(isMaster,onMaster,push) {\r\n  const lensLast = RP().length.dec.lensIndex.run\r\n  const onEmpty = P(HeadList.create,Lexeme.Pipe,R.append)\r\n  const onSlave =\r\n    e=>list=>\r\n        R.ifElse(\r\n          R.isEmpty,\r\n          onEmpty(e),\r\n          R.over(\r\n            lensLast(list),\r\n            push(e)\r\n          ))(list)\r\n  const tranducer = R.map(R.ifElse(isMaster,onMaster,onSlave))\r\n  return R.transduce(tranducer,(acc,val)=>val(acc))\r\n}\r\nfunction intoAtomics(data) {\r\n  const push = e=>P(util.arrayify,R.append(e.value))\r\n  const isMaster = P(prop.val,eq.type.R.op.context)\r\n  const onMaster = P(prop.val,R.of,R.append)\r\n\r\n  const tr = headSplitter(isMaster,onMaster,push)\r\n  return tr([],data)\r\n}\r\nfunction intoPipes(data) {\r\n  const push = e=>hList=>hList.append(e)\r\n  const pipeSymbols = eq.op\r\n    .forwardpipe\r\n    .middlepipe\r\n    .backpipe\r\n  const isMaster = R.both(HeadList.isList,P(prop.head, pipeSymbols))\r\n  const onMaster = P(R.identity,R.append)\r\n\r\n  const tr = headSplitter(isMaster,onMaster,push)\r\n  return tr([],data)\r\n}\r\n\r\nfunction checkReplace(data) {\r\n  const replacers = [\r\n    [eq.op.dash,types.any,R.__],\r\n    [eq.op.equals,types.R,R.equals],\r\n    [eq.op.plus,types.R,R.add],\r\n    [eq.op.minus,types.R,R.subtract],\r\n    [eq.op.map,types.R,R.map]\r\n  ]\r\n  const replacer = (type,value)=>e=>{\r\n    e.value = value\r\n    e.type = type\r\n    return e\r\n  }\r\n  const doCheckReplace = (checker,type,value)=>R.map(R.when(checker,replacer(type,value)))\r\n  const reducer = (acc,val)=>doCheckReplace(...val)(acc)\r\n  return R.reduce(reducer,data,replacers)\r\n}\r\n\r\nconst toMaybes = R.map(S.Maybe.of)\r\nconst taplog = tag=>R.tap(e=>Print.headList(tag,e,-1))\r\nfunction lexemize(data) {\r\n  const whenHeadIsDo = (cond,action)=>R.when(P(prop.head,cond),action)\r\n  const detectAtomic = whenHeadIsDo(eq.type.R.context , Lexeme.AtomicFunc)\r\n  const detectExpr   = whenHeadIsDo(eq.type.op , Lexeme.Expression)\r\n  const detecting = P(\r\n    HeadList.create,\r\n    detectExpr,taplog('detectExpr'),\r\n    detectAtomic,taplog('detectAtomic')\r\n\r\n    )\r\n  const lexemizing = P(\r\n\r\n    S.lift(checkReplace),tapArr('checkRepl'),\r\n    findErrors,tapArr('findErrors'),\r\n    // eitherToMaybe,\r\n    toMaybes,\r\n    intoAtomics,pipelog('intoAtomics'),\r\n    R.map(detecting))\r\n  return lexemizing(data)\r\n}\r\nfunction addArgName(data) {\r\n  const morph = e=>R.when(eq.type.arg.context,R.assoc('argName',e.value))(e)\r\n  const apply = e=>S.Right(morph).ap(e)\r\n  return R.map(apply,data)\r\n}\r\nfunction getSyntaxTree(data) {\r\n  const treePipe = P(\r\n    indexation,tapArr('indexate '),\r\n    addArgName,tapArr('argName  '),\r\n\r\n    lexemize,//tapArr('lexemize'),\r\n    intoPipes\r\n    )\r\n  const setTree = P(stageHeader,e=>R.assoc('tree',treePipe(e.data),e))\r\n  return setTree(data)\r\n}\r\n\r\nmodule.exports = getSyntaxTree","const R = require('ramda')\r\n\r\nconst HeadList = require('./head-list')\r\n\r\nfunction Stack() {\r\n  const appendTo = obj=>e=>obj.append(e)\r\n  this.value = []\r\n  this.push = obj=>this.value.push(appendTo(obj))\r\n  this.pushLast = result=>this.push(HeadList.lastR(result,true))\r\n  this.pop = ()=>this.value.pop()\r\n  this.addToLast = val=>R.last(this.value)(val)\r\n}\r\n\r\nmodule.exports = ()=>new Stack()","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst S = util.S\r\n\r\nconst P = util.P\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\n\r\nconst HeadList = require('../model/head-list')\r\nconst Stack = require('../model/stack')\r\nconst Lexeme = require('../model/lexeme')\r\n\r\nconst tool = require('../lang/tooling')\r\n\r\n\r\nconst eqOp = tool.eq.op\r\nconst stateNames = ['pipe','open','mid','close']\r\nconst states = {\r\n  empty:0,\r\n  pipe:1,\r\n  open:2,\r\n  mid:3,\r\n  close:4\r\n}\r\nconst actions = {\r\n  next:0,\r\n  child:1,\r\n  parent:-1,\r\n  error:NaN\r\n}\r\nconst opCond = opVal => R.both(Lexeme.its.expr, P(util.prop.head,opVal))\r\nconst stateConds = {\r\n  pipe:Lexeme.its.pipe,\r\n  open:opCond(eqOp.backpipe),\r\n  mid:opCond(eqOp.middlepipe),\r\n  close:opCond(eqOp.forwardpipe)\r\n}\r\nconst stConds = R.cond(R.append([R.T,states.pipe],R.map(e=>[stateConds[e],()=>states[e]],stateNames)))\r\n\r\nconst switches = [\r\n  [NaN,1,1,NaN,1], // empty\r\n  [NaN,0,1,NaN,0], // pipe\r\n  [NaN,-1,1,0,-1], // open\r\n  [NaN,-1,1,0,-1], // mid\r\n  [NaN,0,1,NaN,0]  // close\r\n]\r\nfunction optimise(data) {\r\n  const exprToPipe = R.when(Lexeme.its.expr,P(util.prop.tail,HeadList.create, Lexeme.Pipe))\r\n  const singlePipeToAtomic = R.when(R.both(Lexeme.its.pipe,P(HeadList.hasTail,R.not)),util.prop.head)\r\n  return P(exprToPipe,singlePipeToAtomic)(data)\r\n}\r\n\r\nfunction convolve(dataPack) {\r\n  let data = dataPack.tree\r\n  if (!R.is(Array,data)) return S.Left('No array recieved')\r\n  let result = HeadList.emptyList()\r\n  let stack = Stack()\r\n  let state = states.empty\r\n  let i = 0,\r\n      len = data.length\r\n  while(i<len) {\r\n    let e = data[i++]\r\n    let nextState = stConds(e)\r\n    let doAction = switches[state][nextState]\r\n    switch(doAction) {\r\n      case actions.child:\r\n        stack.pushLast(result)\r\n        break\r\n      case actions.parent:\r\n        stack.pop()\r\n        break\r\n    }\r\n    state = nextState\r\n    stack.addToLast(optimise(e))\r\n  }\r\n  dataPack.tree = P(Lexeme.Pipe,optimise)(result)\r\n\r\n  return dataPack\r\n}\r\n\r\nmodule.exports = convolve","const util = require('../util')\r\nconst R = require('ramda')\r\nconst P = util.P\r\nconst log = util.pipelog('tree')\r\nconst pipelog = util.pipelog('tree')\r\n\r\nfunction Outfall() {\r\n  this.id = Math.round(Math.random() * 10e5)\r\n  this.updated = false\r\n  this._data = null\r\n}\r\n\r\nObject.defineProperty(Outfall, 'gate', { get: function () { return new Outfall() } })\r\nObject.defineProperty(Outfall.prototype, 'pipe', {\r\n  get: function () {\r\n    let self = this\r\n    return function (data) {\r\n      self.updated = true\r\n      self._data = data\r\n      return data[0]\r\n    }\r\n  }\r\n})\r\n\r\nOutfall.prototype.Spout = function (index,isArg = true) {\r\n  return Spout(this, index, isArg)\r\n}\r\n\r\nfunction Spout(parent, index,isArg) {\r\n  let spout = Object.create(parent, {\r\n    data: { get: function () { return parent._data }, enumerable: true },\r\n    index: { get: function() { return index }, enumerable: true },\r\n    id: { get: function () { return parent.id }, enumerable: true },\r\n    isArg: { value: isArg, enumerable: true }\r\n  })\r\n  Object.defineProperty(spout, 'pipe', { value:\r\n    function () {\r\n      log('spout pipe')(spout.data[spout.index],spout)\r\n      if(R.isNil(spout.data)) return null\r\n      return spout.isArg\r\n        ? spout.data[spout.index]\r\n        : spout.data[spout.index] },\r\n    enumerable: true })\r\n  return spout\r\n}\r\n\r\n// let stream = Outfall.gate\r\n// let joint = stream.Spout()\r\n\r\nmodule.exports = Outfall","const R = require('ramda')\r\n\r\nconst util = require('../util')\r\nconst P = util.P\r\nconst S = util.S\r\nconst log = util.log('tree')\r\nconst pipelog = util.pipelog('tree')\r\nconst prop = util.prop\r\n\r\nconst eq = require('../lang/tooling').equals\r\n\r\nconst HeadList = require('../model/head-list')\r\nconst types = require('../lang/syntax').types\r\nconst Lexeme = require('../model/lexeme')\r\nconst Err = require('../model/error')\r\n\r\nconst chain = func=>o=>o.chain(func)\r\nclass IndexMap {\r\n  static get indexation() {\r\n    return R.addIndex(R.map)((e,i)=>R.pair(e.value,i))\r\n  }\r\n  constructor(context) {\r\n    let arr = IndexMap.indexation(context)\r\n    log('index map')(arr)\r\n    this._map = new Map(arr)\r\n  }\r\n  get has() {\r\n    let self = this._map\r\n    return function(e){return self.has(e)}\r\n  }\r\n  get get() {\r\n    let self = this._map\r\n    return function(e){return self.get(e)}\r\n  }\r\n  get hasVal() {\r\n    let has = this.has\r\n    return P(prop.val,has)\r\n  }\r\n}\r\nconst errorCheck = R.unless(R.isEmpty,Err.Throw.Args)\r\nconst callNotFunc = (token,userArg) => eq.type.context(token)&&!R.is(Function,userArg)\r\nfunction fillUserData(userData,dataPack) {\r\n  let indexMap = new IndexMap(dataPack.context||[]) //TODO create dataPack.context as empty array\r\n  const isArgOrCont = eq.type.arg.context\r\n  const morpher = HeadList.cyclic(modify)\r\n  let errors = new Set()\r\n  dataPack.tree = morpher(dataPack.tree)\r\n  function modify(e) {\r\n\r\n    if (!isArgOrCont(e)) return e\r\n    log('ee')(e,isArgOrCont(e))\r\n    if (!indexMap.hasVal(e))\r\n      log('ERRRROR!')(e) //TODO Detect using undefined context earlier\r\n    let argIndex = indexMap.get(e.value)\r\n    let getArg = userData[argIndex]\r\n    if (callNotFunc(e,getArg))\r\n      errors.add({argument:e.value,value:getArg})\r\n    log('refs')(e.type,e.value,argIndex,getArg)\r\n    // e.value = dataPack.gate.Spout(argIndex,eq.type.arg(e)).pipe\r\n    e.value = getArg\r\n    return e\r\n  }\r\n  errorCheck([...errors.values()])\r\n  return dataPack\r\n}\r\nmodule.exports = {fillUserData}","const R = require('ramda')\r\nconst HeadList = require('../model/head-list')\r\nconst Lexeme = require('../model/lexeme')\r\nconst util = require('../util')\r\nconst P = util.P\r\nconst pipelog = util.pipelog('tree')\r\nconst Outfall = require('../model/outfall')\r\nconst eq = require('../lang/tooling').equals\r\n\r\nconst Context = require('./context')\r\n\r\nfunction CompileException(obj) {\r\n  this.message = `Can not compile object ${obj}`\r\n  this.name = \"Compile exeption\"\r\n}\r\n\r\nfunction collectData(obj) {\r\n  const collect = R.cond([\r\n    [R.is(Array),sayPipe],\r\n    [Lexeme.its.pipe,sayPipe],\r\n\r\n    // [eq.type.arg,P(pipelog('arg'),R.prop('pipe'))],\r\n    [Lexeme.its.atomic,sayAtomic],\r\n    [P(HeadList.isList,R.not),util.prop.val],\r\n    [R.T,e=>{throw new CompileException(e)}]\r\n  ])\r\n  return collect(obj)\r\n}\r\n\r\nfunction sayPipe(list) {\r\n  const normalize = R.when(HeadList.isList,R.prop('toArray'))\r\n  return P(normalize,R.map(collectData),R.apply(R.pipe))(list)\r\n}\r\n\r\nfunction sayAtomic(list) {\r\n  const applyTailToHead =\r\n    ()=>R.apply(\r\n      collectData(list.head),\r\n      R.map(collectData,list.tail))\r\n  return HeadList.hasTail(list)\r\n    ? applyTailToHead()\r\n    : collectData(list.head)\r\n}\r\n\r\nconst contextArgs = P(\r\n  R.when(R.equals(false),()=>[]),\r\n  R.when(\r\n    util.isof.Empty,\r\n    R.append({type:'fakeContext',value:'data'})),\r\n  R.map(util.prop.val))\r\n\r\nfunction Runner (dataPack) {\r\n  let obj = function(...userArgs) {\r\n    dataPack.gate.pipe(userArgs)\r\n    let filled = Context.fillUserData(userArgs,dataPack)\r\n    let render = collectData(filled.tree)\r\n    return render(...userArgs)\r\n  }\r\n  Object.defineProperty(obj,'data',{\r\n    value:dataPack\r\n  })\r\n  Object.defineProperty(obj,'source',{get:\r\n    function() { return obj.data.source }\r\n  })\r\n  Object.defineProperty(obj,'args',{get:\r\n    function() { return contextArgs(obj.data.context) }\r\n  })\r\n  return obj\r\n}\r\n\r\nfunction say(sourceString) {\r\n  return function(dataPack) {\r\n    dataPack.source = sourceString\r\n    dataPack.gate = Outfall.gate\r\n    return new Runner(dataPack)\r\n  }\r\n}\r\n\r\nsay.sayPipe = sayPipe\r\nsay.collectData = collectData\r\n\r\nmodule.exports = say","const R = require('ramda')\r\n\r\nconst preproc = require('./core/string-preprocess')\r\nconst getTree = require('./core/tree')\r\nconst convolve = require('./core/convolve')\r\nconst Speak = require('./core/say')\r\n\r\nconst util = require('./util')\r\nconst P = util.P\r\nconst log = util.log('index')\r\nconst pipelog = util.pipelog('index')\r\nconst Print = require('./print')\r\n\r\n\r\n\r\nconst taplog = tag=>R.tap(e=>Print.headList(tag,e.tree,-1))\r\n\r\nconst maptaphead = tag=> R.tap(P(\r\n  R.prop('tree'),\r\n  R.map(e=>Print.headList(tag,e,-1))))\r\n\r\nconst mapprint = tag => R.tap(R.map(pipelog(tag)))\r\n\r\nfunction say(data) {\r\n  return P(\r\n    preproc,mapprint('preproc')\r\n    ,getTree,maptaphead('getTree')\r\n    ,convolve,taplog('conv')\r\n    ,Speak(data)\r\n    )(data)\r\n}\r\n\r\nconst pureExample = \"indexes data sright :: head prop 'index' concat @data append 42 sright\"\r\nconst simple = \"when [ == 1 not , + 10 ] + 100\"\r\n// const pure = P( R.when(P(R.equals(1),R.not),R.add(10)),R.add(100))\r\n\r\n// let convolved = say(pureExample)\r\nlog('example')(pureExample)\r\n\r\n// Print.headList('conv',convolved,-1)\r\nlet word = say(pureExample)\r\nlet indexes = [{index:[1,3]},{index:[0,1,2,3]},0]\r\nlet dat = [0,5,20,30,40,50]\r\nlet sright = R.objOf('result')\r\n// let flipap = R.flip(R.append)\r\nlet res = word(indexes,dat,sright)\r\n// let res = word(1)\r\n\r\nlog('res')(res)\r\n\r\nmodule.exports = say"],"names":["require$$1","require$$0","require$$4","debug","require$$3","require$$2","pipefy","syntax","util","splitter","require$$7","require$$6","require$$5","stack","convolve","say"],"mappings":"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"}